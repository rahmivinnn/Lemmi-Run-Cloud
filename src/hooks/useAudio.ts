import { useCallback, useRef, useEffect } from "react";

interface AudioState {
  clickSound: HTMLAudioElement | null;
  hoverSound: HTMLAudioElement | null;
  backgroundMusic: HTMLAudioElement | null;
}

export function useAudio() {
  const audioRef = useRef<AudioState>({
    clickSound: null,
    hoverSound: null,
    backgroundMusic: null,
  });

  useEffect(() => {
    // Initialize audio elements
    try {
      // Create audio context for web audio API
      const AudioContext = window.AudioContext || (window as any).webkitAudioContext;
      const audioContext = new AudioContext();

      // For now, use simple beep sounds generated by Web Audio API
      // In production, these would be actual audio files
      audioRef.current = {
        clickSound: null,
        hoverSound: null,
        backgroundMusic: null,
      };
    } catch (error) {
      console.warn("Audio API not available");
    }
  }, []);

  const playBeep = useCallback((frequency: number, duration: number, volume = 0.1) => {
    try {
      const AudioContext = window.AudioContext || (window as any).webkitAudioContext;
      const audioContext = new AudioContext();
      
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      
      oscillator.frequency.value = frequency;
      oscillator.type = 'square';
      
      gainNode.gain.setValueAtTime(0, audioContext.currentTime);
      gainNode.gain.linearRampToValueAtTime(volume, audioContext.currentTime + 0.01);
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
      
      oscillator.start(audioContext.currentTime);
      oscillator.stop(audioContext.currentTime + duration);
    } catch (error) {
      // Fallback to console beep if audio fails
      console.log("ðŸ”Š Beep!");
    }
  }, []);

  const playClick = useCallback(() => {
    playBeep(800, 0.1, 0.05);
  }, [playBeep]);

  const playHover = useCallback(() => {
    playBeep(600, 0.05, 0.03);
  }, [playBeep]);

  const playSuccess = useCallback(() => {
    playBeep(523, 0.2, 0.05);
    setTimeout(() => playBeep(659, 0.2, 0.05), 100);
    setTimeout(() => playBeep(784, 0.3, 0.05), 200);
  }, [playBeep]);

  const playError = useCallback(() => {
    playBeep(300, 0.3, 0.05);
  }, [playBeep]);

  const playNotification = useCallback(() => {
    playBeep(880, 0.1, 0.03);
    setTimeout(() => playBeep(1175, 0.1, 0.03), 150);
  }, [playBeep]);

  return {
    playClick,
    playHover,
    playSuccess,
    playError,
    playNotification,
  };
}

// Extend window for audio context types
declare global {
  interface Window {
    AudioContext?: typeof AudioContext;
    webkitAudioContext?: typeof AudioContext;
  }
}
