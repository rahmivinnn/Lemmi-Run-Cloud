{"file_contents":{"README-deployment.md":{"content":"# Lemmi Run - VPS Deployment Guide\n\nPanduan deployment Lemmi Run ke VPS Debian 12 dengan IP: 145.79.15.245\n\n## Prerequisites\n\n1. **VPS dengan spesifikasi:**\n   - OS: Debian 12\n   - RAM: Minimal 1GB (direkomendasikan 2GB+)\n   - Storage: Minimal 10GB free space\n   - IP: 145.79.15.245\n\n2. **Local setup:**\n   - SSH access ke VPS\n   - Git installed\n   - rsync installed\n\n## Deployment Options\n\n### Option 1: Simple Deployment (Recommended)\n\nMenggunakan PM2 dan Nginx, lebih ringan dan mudah dikelola:\n\n```bash\n# Make script executable\nchmod +x deploy-simple.sh\n\n# Run deployment\n./deploy-simple.sh\n```\n\n### Option 2: Docker Deployment\n\nMenggunakan Docker dan Docker Compose:\n\n```bash\n# Make script executable  \nchmod +x deploy.sh\n\n# Run deployment\n./deploy.sh\n```\n\n## Manual Deployment Steps\n\nJika ingin deploy manual:\n\n### 1. Upload files to VPS\n\n```bash\nrsync -avz --exclude='node_modules' --exclude='.git' ./ root@145.79.15.245:/var/www/lemmi-run/\n```\n\n### 2. SSH to VPS and setup\n\n```bash\nssh root@145.79.15.245\n\ncd /var/www/lemmi-run\n\n# Install Node.js 18\ncurl -fsSL https://deb.nodesource.com/setup_18.x | bash -\napt-get install -y nodejs\n\n# Install PM2\nnpm install -g pm2\n\n# Install dependencies\nnpm install\n\n# Build application\nnpm run build\n\n# Start with PM2\npm2 start ecosystem.config.js --env production\npm2 save\npm2 startup\n```\n\n### 3. Setup Nginx\n\n```bash\n# Install Nginx\napt-get update && apt-get install -y nginx\n\n# Create Nginx config\nnano /etc/nginx/sites-available/lemmi-run\n\n# Copy configuration from deploy script\n\n# Enable site\nln -s /etc/nginx/sites-available/lemmi-run /etc/nginx/sites-enabled/\nrm /etc/nginx/sites-enabled/default\n\n# Restart Nginx\nnginx -t\nsystemctl restart nginx\nsystemctl enable nginx\n```\n\n### 4. Setup Firewall\n\n```bash\nufw allow 22\nufw allow 80  \nufw allow 443\nufw --force enable\n```\n\n## Post Deployment\n\n### Check Application Status\n\n```bash\n# Check PM2 status\npm2 status\npm2 logs lemmi-run\n\n# Check Nginx status\nsystemctl status nginx\n\n# Check application health\ncurl http://145.79.15.245/health\n```\n\n### Application URLs\n\n- **Main Application:** http://145.79.15.245\n- **Health Check:** http://145.79.15.245/health\n- **API Endpoints:** http://145.79.15.245/api/*\n\n## Management Commands\n\n### PM2 Commands\n```bash\npm2 status                 # Check status\npm2 logs lemmi-run         # View logs\npm2 restart lemmi-run      # Restart app\npm2 stop lemmi-run         # Stop app\npm2 delete lemmi-run       # Remove app\npm2 monit                  # Monitoring\n```\n\n### Nginx Commands\n```bash\nsystemctl status nginx     # Check status\nsystemctl restart nginx   # Restart nginx\nnginx -t                   # Test configuration\ntail -f /var/log/nginx/access.log  # View access logs\n```\n\n### System Monitoring\n```bash\nhtop                       # System resources\ndf -h                      # Disk space\nfree -h                    # Memory usage\nnetstat -tlnp              # Check ports\n```\n\n## SSL Setup (Optional)\n\n### Install Certbot\n```bash\napt-get install -y certbot python3-certbot-nginx\n```\n\n### Get SSL Certificate\n```bash\ncertbot --nginx -d your-domain.com\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Port 3000 not accessible**\n   - Check if PM2 is running: `pm2 status`\n   - Check firewall: `ufw status`\n   - Check application logs: `pm2 logs lemmi-run`\n\n2. **Nginx 502 Bad Gateway**\n   - Ensure app is running on port 3000\n   - Check Nginx configuration: `nginx -t`\n   - Check Nginx error logs: `tail -f /var/log/nginx/error.log`\n\n3. **Application crashes**\n   - Check PM2 logs: `pm2 logs lemmi-run`\n   - Check system resources: `htop`\n   - Restart application: `pm2 restart lemmi-run`\n\n### Log Locations\n\n- **PM2 Logs:** `/var/www/lemmi-run/logs/`\n- **Nginx Access:** `/var/log/nginx/access.log`\n- **Nginx Error:** `/var/log/nginx/error.log`\n- **System:** `/var/log/syslog`\n\n## Security Notes\n\n- UFW firewall enabled with only necessary ports\n- Nginx configured with security headers\n- PM2 runs application with proper process management\n- Regular updates recommended: `apt-get update && apt-get upgrade`\n\n## Performance Optimization\n\n### PM2 Cluster Mode\nApplication runs in cluster mode with all CPU cores for better performance.\n\n### Nginx Caching\nStatic assets are served with appropriate cache headers.\n\n### Memory Limits\nPM2 configured with 1GB memory limit and auto-restart on memory exceeds.\n\n## Support\n\nJika ada masalah dengan deployment, cek:\n\n1. PM2 status dan logs\n2. Nginx status dan configuration\n3. System resources (RAM, disk, CPU)\n4. Firewall rules\n5. Application health endpoint\n\nAplikasi Lemmi Run sudah siap digunakan di: **http://145.79.15.245**","size_bytes":4616},"deploy-simple.sh":{"content":"#!/bin/bash\n\n# Simple deployment script untuk VPS\nset -e\n\necho \"üèÉ Starting Lemmi Run VPS Deployment...\"\n\n# Configuration\nVPS_IP=\"145.79.15.245\"\nVPS_USER=\"root\"\nAPP_NAME=\"lemmi-run\"\nDEPLOY_DIR=\"/var/www/lemmi-run\"\n\n# Colors\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nRED='\\033[0;31m'\nNC='\\033[0m'\n\nprint_status() {\n    echo -e \"${GREEN}[INFO]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARN]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# Upload project files\nprint_status \"Uploading files to VPS...\"\nrsync -avz --exclude='node_modules' --exclude='.git' --exclude='dist' --exclude='*.log' \\\n    ./ ${VPS_USER}@${VPS_IP}:${DEPLOY_DIR}/\n\n# Execute commands on VPS\nprint_status \"Setting up application on VPS...\"\nssh ${VPS_USER}@${VPS_IP} << 'ENDSSH'\n\nset -e\n\n# Navigate to app directory\ncd /var/www/lemmi-run\n\n# Install Node.js if not installed\nif ! command -v node &> /dev/null; then\n    echo \"Installing Node.js...\"\n    curl -fsSL https://deb.nodesource.com/setup_18.x | bash -\n    apt-get install -y nodejs\nfi\n\n# Install PM2 globally if not installed\nif ! command -v pm2 &> /dev/null; then\n    echo \"Installing PM2...\"\n    npm install -g pm2\nfi\n\n# Install dependencies\necho \"Installing dependencies...\"\nnpm install\n\n# Build the application\necho \"Building application...\"\nnpm run build\n\n# Create logs directory\nmkdir -p logs\n\n# Stop existing PM2 process\npm2 stop lemmi-run || true\npm2 delete lemmi-run || true\n\n# Start application with PM2\necho \"Starting application with PM2...\"\npm2 start ecosystem.config.js --env production\n\n# Save PM2 configuration\npm2 save\npm2 startup\n\n# Setup Nginx if not installed\nif ! command -v nginx &> /dev/null; then\n    echo \"Installing Nginx...\"\n    apt-get update\n    apt-get install -y nginx\nfi\n\n# Create Nginx configuration\ncat > /etc/nginx/sites-available/lemmi-run << 'EOF'\nserver {\n    listen 80;\n    server_name 145.79.15.245;\n\n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n    }\n\n    location /health {\n        proxy_pass http://localhost:3000/health;\n        access_log off;\n    }\n}\nEOF\n\n# Enable the site\nln -sf /etc/nginx/sites-available/lemmi-run /etc/nginx/sites-enabled/\nrm -f /etc/nginx/sites-enabled/default\n\n# Test and reload Nginx\nnginx -t\nsystemctl restart nginx\nsystemctl enable nginx\n\n# Setup firewall\nufw allow 22\nufw allow 80\nufw allow 443\nufw --force enable\n\necho \"‚úÖ Deployment completed!\"\necho \"Application is running at: http://145.79.15.245\"\necho \"\"\necho \"Useful commands:\"\necho \"- pm2 status          # Check application status\"\necho \"- pm2 logs lemmi-run  # View logs\"\necho \"- pm2 restart lemmi-run # Restart app\"\necho \"- systemctl status nginx # Check nginx status\"\n\nENDSSH\n\nprint_status \"Deployment completed successfully!\"\nprint_status \"Your Lemmi Run application is now available at: http://145.79.15.245\"\nprint_warning \"Next steps:\"\nprint_warning \"1. Test the application in your browser\"\nprint_warning \"2. Set up SSL certificate if needed (Let's Encrypt recommended)\"\nprint_warning \"3. Configure domain DNS if you have one\"","size_bytes":3599},"deploy.sh":{"content":"#!/bin/bash\n\n# Lemmi Run Deployment Script for VPS\n# Usage: ./deploy.sh\n\nset -e\n\necho \"üèÉ Starting Lemmi Run deployment...\"\n\n# Configuration\nVPS_IP=\"145.79.15.245\"\nVPS_USER=\"root\"\nPROJECT_NAME=\"lemmirun\"\nDEPLOY_PATH=\"/opt/lemmirun\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m' # No Color\n\n# Function to print colored output\nprint_status() {\n    echo -e \"${GREEN}[INFO]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# Check if SSH key exists\nif [ ! -f ~/.ssh/id_rsa ]; then\n    print_warning \"SSH key not found. Generating new SSH key...\"\n    ssh-keygen -t rsa -b 4096 -C \"lemmirun-deploy\" -f ~/.ssh/id_rsa -N \"\"\nfi\n\n# Upload files to VPS\nprint_status \"Uploading files to VPS...\"\nrsync -avz --exclude='node_modules' --exclude='.git' --exclude='dist' \\\n    ./ ${VPS_USER}@${VPS_IP}:${DEPLOY_PATH}/\n\n# Execute deployment on VPS\nprint_status \"Executing deployment on VPS...\"\nssh ${VPS_USER}@${VPS_IP} << EOF\nset -e\n\ncd ${DEPLOY_PATH}\n\n# Update system\nprint_status \"Updating system packages...\"\napt-get update && apt-get upgrade -y\n\n# Install Docker if not present\nif ! command -v docker &> /dev/null; then\n    print_status \"Installing Docker...\"\n    curl -fsSL https://get.docker.com -o get-docker.sh\n    sh get-docker.sh\n    rm get-docker.sh\nfi\n\n# Install Docker Compose if not present\nif ! command -v docker-compose &> /dev/null; then\n    print_status \"Installing Docker Compose...\"\n    curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n    chmod +x /usr/local/bin/docker-compose\nfi\n\n# Create logs directory\nmkdir -p logs\n\n# Stop existing containers\nprint_status \"Stopping existing containers...\"\ndocker-compose down --remove-orphans || true\n\n# Build and start new containers\nprint_status \"Building and starting containers...\"\ndocker-compose up -d --build\n\n# Wait for services to be ready\nprint_status \"Waiting for services to start...\"\nsleep 30\n\n# Check container status\ndocker-compose ps\n\n# Show logs\nprint_status \"Application logs:\"\ndocker-compose logs --tail=50 lemmirun\n\nprint_status \"Deployment completed successfully!\"\nprint_status \"Application is available at: http://${VPS_IP}\"\nEOF\n\nprint_status \"Deployment script completed!\"\nprint_status \"Your Lemmi Run application should be accessible at: http://${VPS_IP}\"\nprint_warning \"Don't forget to:\"\nprint_warning \"1. Configure your domain DNS if you have one\"\nprint_warning \"2. Set up SSL certificate for HTTPS\"\nprint_warning \"3. Configure firewall rules if needed\"","size_bytes":2638},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"ecosystem.config.js":{"content":"module.exports = {\n  apps: [{\n    name: 'lemmi-run',\n    script: 'server/index.js',\n    instances: 'max',\n    exec_mode: 'cluster',\n    env: {\n      NODE_ENV: 'production',\n      PORT: 3000\n    },\n    env_production: {\n      NODE_ENV: 'production',\n      PORT: 3000\n    },\n    error_file: './logs/err.log',\n    out_file: './logs/out.log',\n    log_file: './logs/combined.log',\n    time: true,\n    max_memory_restart: '1G',\n    node_args: '--max_old_space_size=1024',\n    restart_delay: 4000,\n    max_restarts: 10,\n    min_uptime: '10s',\n    watch: false,\n    ignore_watch: ['node_modules', 'logs'],\n    merge_logs: true,\n    log_date_format: 'YYYY-MM-DD HH:mm Z',\n    autorestart: true\n  }]\n};","size_bytes":692},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Lemmi Run - Cardano Gaming Platform\n\n## Overview\n\nLemmi Run is a Unity-style Web3 gaming platform built specifically for the Cardano ecosystem. The application features real Lace wallet integration, Gerbil NFT verification, $Lemmi token tracking, mini-games, referral systems, and skill-based rewards. Built as a full-stack React + Express application, it provides an authentic gaming experience with Unity-like UI panels, HUD elements, and immersive visual design.\n\nThe platform serves as a complete gaming interface with features like Lace wallet connectivity, real-time Cardano blockchain data integration, interactive gaming elements, and a comprehensive reward system. It's designed specifically for Gerbil NFT holders and $Lemmi token users on the Cardano blockchain, providing an engaging Unity-game-style experience that bridges traditional gaming with Web3 functionality.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React 18** with TypeScript for type-safe component development\n- **Vite** as the build tool for fast development and optimized production builds\n- **TailwindCSS** with custom cyberpunk theme for styling\n- **Shadcn/ui** component library for consistent UI elements\n- **React Query (TanStack Query)** for efficient API state management and caching\n- **Wouter** for lightweight client-side routing\n\n### Backend Architecture\n- **Express.js** server with TypeScript for API endpoints\n- **In-memory storage** using Maps for development (production-ready for database migration)\n- RESTful API design with endpoints for wallet verification, token balances, referrals, game scores, and skill rewards\n- **Vite middleware integration** for seamless development experience with HMR support\n\n### Component Structure\n- **Modular component design** with separation of concerns\n- **Custom hooks** for wallet connectivity, audio management, and shared state\n- **Glass morphism UI** with neon borders and cyberpunk aesthetics\n- **Responsive design** optimized for both desktop and mobile experiences\n\n### Data Storage Design\n- **Drizzle ORM** configured for PostgreSQL with migration support\n- **Zod schemas** for runtime type validation and data integrity\n- **Database tables** for users, wallets, referrals, game scores, and skill rewards\n- **In-memory fallback** storage for development and testing\n\n### Game Integration\n- **Mini-game engine** with WASD controls and collision detection\n- **Real-time score tracking** with persistent high score storage\n- **Audio system** using Web Audio API for cyberpunk sound effects\n- **Easter egg activation** through sequential user interactions\n\n### Security and Validation\n- **Input validation** using Zod schemas across all API endpoints\n- **Type-safe API contracts** shared between frontend and backend\n- **Error boundary implementation** with graceful fallback UI\n- **CORS and security headers** configured for production deployment\n\n## External Dependencies\n\n### Blockchain Integration\n- **Lace Wallet API** - Real Cardano wallet integration for authentic blockchain connectivity\n- **Cardano Network** - Native support for ADA transactions and Cardano-based assets\n- **Gerbil NFT Verification** - Authentic NFT ownership verification on Cardano blockchain\n- **$Lemmi Token Integration** - Real token balance tracking and transaction capabilities\n\n### UI and Styling\n- **@radix-ui/react-*** - Comprehensive set of accessible UI primitives\n- **TailwindCSS** with PostCSS - Utility-first CSS framework with custom cyberpunk theme\n- **Google Fonts** - Orbitron, Rajdhani, and JetBrains Mono for futuristic typography\n- **Lucide React** - Icon library for consistent iconography\n\n### Development Tools\n- **Drizzle Kit** - Database migration and schema management\n- **@replit/vite-plugin-runtime-error-modal** - Enhanced error reporting in development\n- **@replit/vite-plugin-cartographer** - Development tooling for Replit environment\n\n### State Management and Networking\n- **@tanstack/react-query** - Server state management with caching and synchronization\n- **React Hook Form** with Hookform Resolvers - Form state management and validation\n- **Date-fns** - Date manipulation and formatting utilities\n\n### Design Philosophy\n- **Unity-style Interface** - Game-like panels, HUD elements, and immersive visual design\n- **Real Blockchain Integration** - Authentic Lace wallet connectivity, no mock data\n- **Gaming-First Approach** - Designed to feel like a Unity game rather than a traditional web app\n- **Cardano-Native** - Built specifically for the Cardano ecosystem and community\n\n### Recent Changes (January 2025)\n- Complete redesign to Unity-style gaming interface with HUD, navigation panels, and game aesthetics\n- Migration from multi-wallet support to Lace-only integration for authentic Cardano experience\n- Updated branding from \"Neural Interface\" to \"Lemmi Run - Gerbil Edition\"\n- Enhanced mobile responsiveness with game-style UI elements\n- Real Lace wallet API integration replacing mock wallet connections","size_bytes":5062},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        cyber: {\n          cyan: \"var(--cyber-cyan)\",\n          magenta: \"var(--cyber-magenta)\",\n          green: \"var(--cyber-green)\",\n          gold: \"var(--cyber-gold)\",\n          blue: \"var(--cyber-blue)\",\n          dark: \"var(--cyber-dark)\",\n          purple: \"var(--cyber-purple)\",\n        }\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        orbitron: [\"var(--font-orbitron)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        glow: {\n          \"0%\": {\n            boxShadow: \"0 0 5px var(--cyber-cyan), 0 0 10px var(--cyber-cyan), 0 0 15px var(--cyber-cyan)\",\n          },\n          \"100%\": {\n            boxShadow: \"0 0 10px var(--cyber-cyan), 0 0 20px var(--cyber-cyan), 0 0 30px var(--cyber-cyan)\",\n          },\n        },\n        float: {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-10px)\" },\n        },\n        glitch: {\n          \"0%\": { transform: \"translateX(0)\" },\n          \"20%\": { transform: \"translateX(-2px)\" },\n          \"40%\": { transform: \"translateX(2px)\" },\n          \"60%\": { transform: \"translateX(-1px)\" },\n          \"80%\": { transform: \"translateX(1px)\" },\n          \"100%\": { transform: \"translateX(0)\" },\n        },\n        typewriter: {\n          \"0%, 50%\": { borderRightColor: \"transparent\" },\n          \"51%, 100%\": { borderRightColor: \"var(--cyber-cyan)\" },\n        },\n        scanline: {\n          \"0%\": { transform: \"translateY(-100%)\" },\n          \"100%\": { transform: \"translateY(100vh)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        glow: \"glow 2s ease-in-out infinite alternate\",\n        float: \"float 6s ease-in-out infinite\",\n        \"pulse-slow\": \"pulse 3s ease-in-out infinite\",\n        glitch: \"glitch 0.3s ease-in-out infinite alternate\",\n        typewriter: \"typewriter 3s steps(40) infinite\",\n        scanline: \"scanline 2s linear infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4506},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '3000', 10);\n  // Health check endpoint\n  app.get('/health', (req, res) => {\n    res.status(200).json({ status: 'healthy', timestamp: new Date().toISOString() });\n  });\n\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2223},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertWalletSchema, \n  insertGerbilNftSchema,\n  insertCardanoTransactionSchema,\n  insertReferralSchema, \n  insertGameScoreSchema, \n  insertSkillRewardSchema \n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Wallet NFT verification endpoint\n  app.get(\"/api/wallet/:address/nfts\", async (req, res) => {\n    try {\n      const { address } = req.params;\n      const wallet = await storage.getWallet(address);\n      \n      if (!wallet) {\n        return res.json({ hasGerbilNft: false, nfts: [] });\n      }\n      \n      // In a real implementation, this would call Moralis/Alchemy API\n      // For now, simulate NFT checking based on wallet data\n      const nfts = wallet.hasGerbilNft ? [\"GERBIL_CONTRACT_ADDRESS\"] : [];\n      \n      res.json({ \n        hasGerbilNft: wallet.hasGerbilNft,\n        nfts \n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch NFTs\" });\n    }\n  });\n\n  // Token balance endpoint\n  app.get(\"/api/wallet/:address/lemmi\", async (req, res) => {\n    try {\n      const { address } = req.params;\n      const wallet = await storage.getWallet(address);\n      \n      if (!wallet) {\n        return res.json({ balance: 0 });\n      }\n      \n      // In a real implementation, this would call smart contract\n      res.json({ balance: wallet.lemmiBalance || 0 });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch token balance\" });\n    }\n  });\n\n  // Create or update wallet\n  app.post(\"/api/wallet\", async (req, res) => {\n    try {\n      const walletData = insertWalletSchema.parse(req.body);\n      \n      const existingWallet = await storage.getWallet(walletData.address);\n      if (existingWallet) {\n        const updated = await storage.updateWallet(walletData.address, walletData);\n        return res.json(updated);\n      }\n      \n      const wallet = await storage.createWallet(walletData);\n      res.json(wallet);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid wallet data\" });\n    }\n  });\n\n  // Gerbil NFTs endpoints\n  app.get(\"/api/nfts/gerbils\", async (req, res) => {\n    try {\n      const { ownerId } = req.query;\n      const nfts = await storage.getGerbilNfts(ownerId as string);\n      res.json(nfts);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch Gerbil NFTs\" });\n    }\n  });\n\n  app.get(\"/api/nfts/gerbils/:tokenId\", async (req, res) => {\n    try {\n      const { tokenId } = req.params;\n      const nft = await storage.getGerbilNft(tokenId);\n      if (!nft) {\n        return res.status(404).json({ error: \"Gerbil NFT not found\" });\n      }\n      res.json(nft);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch Gerbil NFT\" });\n    }\n  });\n\n  app.post(\"/api/nfts/gerbils\", async (req, res) => {\n    try {\n      const nftData = insertGerbilNftSchema.parse(req.body);\n      const nft = await storage.createGerbilNft(nftData);\n      res.json(nft);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid NFT data\" });\n    }\n  });\n\n  // Cardano transactions endpoints\n  app.get(\"/api/cardano/transactions\", async (req, res) => {\n    try {\n      const { userId } = req.query;\n      const transactions = await storage.getCardanoTransactions(userId as string);\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.get(\"/api/cardano/transactions/:txHash\", async (req, res) => {\n    try {\n      const { txHash } = req.params;\n      const transaction = await storage.getCardanoTransaction(txHash);\n      if (!transaction) {\n        return res.status(404).json({ error: \"Transaction not found\" });\n      }\n      res.json(transaction);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch transaction\" });\n    }\n  });\n\n  app.post(\"/api/cardano/transactions\", async (req, res) => {\n    try {\n      const transactionData = insertCardanoTransactionSchema.parse(req.body);\n      const transaction = await storage.createCardanoTransaction(transactionData);\n      res.json(transaction);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid transaction data\" });\n    }\n  });\n\n  // Generate referral link\n  app.post(\"/api/referral\", async (req, res) => {\n    try {\n      const { walletAddress } = req.body;\n      \n      if (!walletAddress) {\n        return res.status(400).json({ error: \"Wallet address required\" });\n      }\n      \n      const code = Math.random().toString(36).substring(2, 8).toUpperCase();\n      const referral = await storage.createReferral({ code, walletAddress });\n      \n      res.json({ \n        code: referral.code,\n        link: `${req.protocol}://${req.get('host')}?ref=${referral.code}`\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to generate referral\" });\n    }\n  });\n\n  // Get referrals for wallet\n  app.get(\"/api/referral/:walletAddress\", async (req, res) => {\n    try {\n      const { walletAddress } = req.params;\n      const referrals = await storage.getReferralsByWallet(walletAddress);\n      \n      const totalClicks = referrals.reduce((sum, ref) => sum + (ref.clickCount || 0), 0);\n      \n      res.json({ \n        referrals,\n        totalReferred: totalClicks,\n        activeReferrals: referrals.length\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch referrals\" });\n    }\n  });\n\n  // Track referral click\n  app.post(\"/api/referral/:code/click\", async (req, res) => {\n    try {\n      const { code } = req.params;\n      await storage.incrementReferralClick(code);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to track referral click\" });\n    }\n  });\n\n  // Submit game score\n  app.post(\"/api/game/score\", async (req, res) => {\n    try {\n      const scoreData = insertGameScoreSchema.parse(req.body);\n      const score = await storage.createGameScore(scoreData);\n      \n      // Get high score for comparison\n      const highScore = await storage.getHighScore(scoreData.walletAddress, scoreData.game);\n      \n      res.json({ \n        score: score.score,\n        highScore,\n        isNewRecord: score.score > highScore\n      });\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid score data\" });\n    }\n  });\n\n  // Get game scores\n  app.get(\"/api/game/:walletAddress/:game/scores\", async (req, res) => {\n    try {\n      const { walletAddress, game } = req.params;\n      const scores = await storage.getGameScores(walletAddress, game);\n      const highScore = await storage.getHighScore(walletAddress, game);\n      \n      res.json({ \n        scores: scores.slice(0, 10), // Top 10 scores\n        highScore\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch scores\" });\n    }\n  });\n\n  // Get/Update skill rewards\n  app.get(\"/api/skills/:walletAddress\", async (req, res) => {\n    try {\n      const { walletAddress } = req.params;\n      const skills = await storage.getSkillReward(walletAddress);\n      \n      if (!skills) {\n        // Create default skill reward entry\n        const newSkills = await storage.createSkillReward({\n          walletAddress,\n          neuralSync: Math.floor(Math.random() * 1000),\n          efficiency: Math.floor(Math.random() * 100),\n          totalRewards: 0\n        });\n        return res.json(newSkills);\n      }\n      \n      res.json(skills);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch skill rewards\" });\n    }\n  });\n\n  app.post(\"/api/skills/:walletAddress\", async (req, res) => {\n    try {\n      const { walletAddress } = req.params;\n      const updates = req.body;\n      \n      let skills = await storage.getSkillReward(walletAddress);\n      \n      if (!skills) {\n        skills = await storage.createSkillReward({\n          walletAddress,\n          neuralSync: updates.neuralSync || 0,\n          efficiency: updates.efficiency || 0,\n          totalRewards: updates.totalRewards || 0\n        });\n      } else {\n        skills = await storage.updateSkillReward(walletAddress, updates);\n      }\n      \n      res.json(skills);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update skill rewards\" });\n    }\n  });\n\n  // Neural features status endpoint\n  app.get(\"/api/features/:walletAddress?\", async (req, res) => {\n    try {\n      const { walletAddress } = req.params;\n      \n      let features = {\n        freeAccess: false,\n        lemmiBalance: 0,\n        skillRewards: { efficiency: 0, neuralSync: 0 },\n        referralCount: 0,\n        degenMode: false,\n        kingLemmiUnlocked: 5\n      };\n      \n      if (walletAddress) {\n        const wallet = await storage.getWallet(walletAddress);\n        const skills = await storage.getSkillReward(walletAddress);\n        const referrals = await storage.getReferralsByWallet(walletAddress);\n        \n        features = {\n          freeAccess: wallet?.hasGerbilNft || false,\n          lemmiBalance: wallet?.lemmiBalance || 0,\n          skillRewards: {\n            efficiency: skills?.efficiency || 0,\n            neuralSync: skills?.neuralSync || 0\n          },\n          referralCount: referrals.reduce((sum, ref) => sum + (ref.clickCount || 0), 0),\n          degenMode: false, // This would be based on some criteria\n          kingLemmiUnlocked: Math.min(10, Math.floor((skills?.totalRewards || 0) / 100))\n        };\n      }\n      \n      res.json(features);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch features\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":9720},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Wallet, \n  type InsertWallet,\n  type GerbilNft,\n  type InsertGerbilNft,\n  type CardanoTransaction,\n  type InsertCardanoTransaction,\n  type Referral,\n  type InsertReferral,\n  type GameScore,\n  type InsertGameScore,\n  type SkillReward,\n  type InsertSkillReward\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  \n  getWallet(address: string): Promise<Wallet | undefined>;\n  createWallet(wallet: InsertWallet): Promise<Wallet>;\n  updateWallet(address: string, updates: Partial<Wallet>): Promise<Wallet | undefined>;\n  \n  getGerbilNfts(ownerId?: string): Promise<GerbilNft[]>;\n  getGerbilNft(tokenId: string): Promise<GerbilNft | undefined>;\n  createGerbilNft(nft: InsertGerbilNft): Promise<GerbilNft>;\n  \n  getCardanoTransactions(userId?: string): Promise<CardanoTransaction[]>;\n  getCardanoTransaction(txHash: string): Promise<CardanoTransaction | undefined>;\n  createCardanoTransaction(transaction: InsertCardanoTransaction): Promise<CardanoTransaction>;\n  updateCardanoTransaction(txHash: string, updates: Partial<CardanoTransaction>): Promise<CardanoTransaction | undefined>;\n  \n  getReferral(code: string): Promise<Referral | undefined>;\n  getReferralsByWallet(walletAddress: string): Promise<Referral[]>;\n  createReferral(referral: InsertReferral): Promise<Referral>;\n  incrementReferralClick(code: string): Promise<void>;\n  \n  getGameScores(walletAddress: string, game: string): Promise<GameScore[]>;\n  getHighScore(walletAddress: string, game: string): Promise<number>;\n  createGameScore(score: InsertGameScore): Promise<GameScore>;\n  \n  getSkillReward(walletAddress: string): Promise<SkillReward | undefined>;\n  createSkillReward(reward: InsertSkillReward): Promise<SkillReward>;\n  updateSkillReward(walletAddress: string, updates: Partial<SkillReward>): Promise<SkillReward | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private wallets: Map<string, Wallet>;\n  private gerbilNfts: Map<string, GerbilNft>;\n  private cardanoTransactions: Map<string, CardanoTransaction>;\n  private referrals: Map<string, Referral>;\n  private gameScores: Map<string, GameScore>;\n  private skillRewards: Map<string, SkillReward>;\n\n  constructor() {\n    this.users = new Map();\n    this.wallets = new Map();\n    this.gerbilNfts = new Map();\n    this.cardanoTransactions = new Map();\n    this.referrals = new Map();\n    this.gameScores = new Map();\n    this.skillRewards = new Map();\n    \n    // Initialize with Gerbil NFT data\n    this.initializeGerbilNfts();\n    this.initializeMockTransactions();\n  }\n  \n  private initializeGerbilNfts() {\n    const gerbilNfts = [\n      {\n        tokenId: \"jeff123\",\n        name: \"Jeff - Laser Eyes\",\n        rarity: \"Legendary\",\n        attributes: [\"Laser Eyes\", \"Mischievous\", \"Power Level 9000\"],\n        imageUrl: \"/assets/jeff_1754579357023.webp\",\n        cardanoScanUrl: \"https://cardanoscan.io/token/jeff123\",\n        ownerId: null\n      },\n      {\n        tokenId: \"ashina456\",\n        name: \"Ashina - Samurai Warrior\",\n        rarity: \"Epic\",\n        attributes: [\"Samurai\", \"Golden Armor\", \"Honor Badge\"],\n        imageUrl: \"/assets/ashina_1754579357036.webp\",\n        cardanoScanUrl: \"https://cardanoscan.io/token/ashina456\",\n        ownerId: null\n      },\n      {\n        tokenId: \"undead789\",\n        name: \"Undead - Zombie Gerbil\",\n        rarity: \"Rare\",\n        attributes: [\"Zombie\", \"Exposed Brain\", \"Creepy\"],\n        imageUrl: \"/assets/undead_1754579357037.webp\",\n        cardanoScanUrl: \"https://cardanoscan.io/token/undead789\",\n        ownerId: null\n      },\n      {\n        tokenId: \"grim101\",\n        name: \"Grim Reaper\",\n        rarity: \"Epic\",\n        attributes: [\"Death\", \"Scythe\", \"Dark Powers\"],\n        imageUrl: \"/assets/grim reaper_1754579357037.webp\",\n        cardanoScanUrl: \"https://cardanoscan.io/token/grim101\",\n        ownerId: null\n      },\n      {\n        tokenId: \"cowboy202\",\n        name: \"Cowboy - Wild West\",\n        rarity: \"Uncommon\",\n        attributes: [\"Cowboy Hat\", \"Gunslinger\", \"Desert Wanderer\"],\n        imageUrl: \"/assets/cowboy_1754579357037.webp\",\n        cardanoScanUrl: \"https://cardanoscan.io/token/cowboy202\",\n        ownerId: null\n      },\n      {\n        tokenId: \"bomo303\",\n        name: \"Bomo - Gentleman\",\n        rarity: \"Rare\",\n        attributes: [\"Gentleman\", \"Top Hat\", \"Sophisticated\"],\n        imageUrl: \"/assets/bomo_1754579357038.webp\",\n        cardanoScanUrl: \"https://cardanoscan.io/token/bomo303\",\n        ownerId: null\n      },\n      {\n        tokenId: \"ico404\",\n        name: \"Ico - Viking Warrior\",\n        rarity: \"Epic\",\n        attributes: [\"Viking\", \"Horned Helmet\", \"Battle Ready\"],\n        imageUrl: \"/assets/ico_1754579357038.webp\",\n        cardanoScanUrl: \"https://cardanoscan.io/token/ico404\",\n        ownerId: null\n      },\n      {\n        tokenId: \"mumrik505\",\n        name: \"Mumrik - Forest Ranger\",\n        rarity: \"Common\",\n        attributes: [\"Forest\", \"Nature Lover\", \"Green Cloak\"],\n        imageUrl: \"/assets/mumrik_1754579357038.webp\",\n        cardanoScanUrl: \"https://cardanoscan.io/token/mumrik505\",\n        ownerId: null\n      },\n      {\n        tokenId: \"snow606\",\n        name: \"Snow - Winter Survivor\",\n        rarity: \"Rare\",\n        attributes: [\"Winter\", \"Cold Resistant\", \"Furry Companion\"],\n        imageUrl: \"/assets/snow_1754579357039.webp\",\n        cardanoScanUrl: \"https://cardanoscan.io/token/snow606\",\n        ownerId: null\n      }\n    ];\n    \n    gerbilNfts.forEach(nft => {\n      const fullNft: GerbilNft = {\n        ...nft,\n        id: randomUUID(),\n        createdAt: new Date()\n      };\n      this.gerbilNfts.set(nft.tokenId, fullNft);\n    });\n  }\n  \n  private initializeMockTransactions() {\n    const transactions: InsertCardanoTransaction[] = [\n      {\n        txHash: \"4a2b8c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b\",\n        type: \"received\",\n        amount: \"150.75\",\n        token: \"ADA\",\n        fromAddress: \"addr1q9x2z3a4b5c6d7e8f9g0h1i2j3k4l5m6n7o8p9q0r1s2t3u4v5w6x7y8z9a0b1c\",\n        toAddress: \"Your Wallet\",\n        status: \"confirmed\",\n        cardanoScanUrl: \"https://cardanoscan.io/transaction/4a2b8c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b\",\n        userId: null\n      },\n      {\n        txHash: \"1b0a9f8e7d6c5b4a3f2e1d0c9b8a7f6e5d4c3b2a1f0e9d8c7b6a5f4e3d2c1b0a\",\n        type: \"nft_transfer\",\n        amount: \"1\",\n        token: \"LEMMI\",\n        fromAddress: \"addr1q8x1y2z3a4b5c6d7e8f9g0h1i2j3k4l5m6n7o8p9q0r1s2t3u4v5w6x7y8z9a0\",\n        toAddress: \"Your Wallet\",\n        status: \"confirmed\",\n        cardanoScanUrl: \"https://cardanoscan.io/transaction/1b0a9f8e7d6c5b4a3f2e1d0c9b8a7f6e5d4c3b2a1f0e9d8c7b6a5f4e3d2c1b0a\",\n        nftData: {\n          name: \"Jeff - Laser Eyes Gerbil\",\n          image: \"/assets/jeff_1754579357023.webp\"\n        },\n        userId: null\n      }\n    ];\n    \n    transactions.forEach(tx => {\n      const fullTx: CardanoTransaction = {\n        ...tx,\n        id: randomUUID(),\n        timestamp: new Date()\n      };\n      this.cardanoTransactions.set(tx.txHash, fullTx);\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      lemmiTokens: \"0\",\n      adaBalance: \"0\",\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n  \n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updated = { ...user, ...updates, updatedAt: new Date() };\n    this.users.set(id, updated);\n    return updated;\n  }\n\n  async getWallet(address: string): Promise<Wallet | undefined> {\n    return this.wallets.get(address);\n  }\n\n  async createWallet(insertWallet: InsertWallet): Promise<Wallet> {\n    const id = randomUUID();\n    const wallet: Wallet = { \n      ...insertWallet, \n      id, \n      createdAt: new Date()\n    };\n    this.wallets.set(wallet.address, wallet);\n    return wallet;\n  }\n\n  async updateWallet(address: string, updates: Partial<Wallet>): Promise<Wallet | undefined> {\n    const wallet = this.wallets.get(address);\n    if (!wallet) return undefined;\n    \n    const updated = { ...wallet, ...updates };\n    this.wallets.set(address, updated);\n    return updated;\n  }\n  \n  async getGerbilNfts(ownerId?: string): Promise<GerbilNft[]> {\n    const allNfts = Array.from(this.gerbilNfts.values());\n    if (ownerId) {\n      return allNfts.filter(nft => nft.ownerId === ownerId);\n    }\n    return allNfts;\n  }\n  \n  async getGerbilNft(tokenId: string): Promise<GerbilNft | undefined> {\n    return this.gerbilNfts.get(tokenId);\n  }\n  \n  async createGerbilNft(insertNft: InsertGerbilNft): Promise<GerbilNft> {\n    const id = randomUUID();\n    const nft: GerbilNft = {\n      ...insertNft,\n      id,\n      createdAt: new Date()\n    };\n    this.gerbilNfts.set(insertNft.tokenId, nft);\n    return nft;\n  }\n  \n  async getCardanoTransactions(userId?: string): Promise<CardanoTransaction[]> {\n    const allTxs = Array.from(this.cardanoTransactions.values());\n    if (userId) {\n      return allTxs.filter(tx => tx.userId === userId);\n    }\n    return allTxs.sort((a, b) => (b.timestamp?.getTime() || 0) - (a.timestamp?.getTime() || 0));\n  }\n  \n  async getCardanoTransaction(txHash: string): Promise<CardanoTransaction | undefined> {\n    return this.cardanoTransactions.get(txHash);\n  }\n  \n  async createCardanoTransaction(insertTx: InsertCardanoTransaction): Promise<CardanoTransaction> {\n    const id = randomUUID();\n    const transaction: CardanoTransaction = {\n      ...insertTx,\n      id,\n      timestamp: new Date()\n    };\n    this.cardanoTransactions.set(insertTx.txHash, transaction);\n    return transaction;\n  }\n  \n  async updateCardanoTransaction(txHash: string, updates: Partial<CardanoTransaction>): Promise<CardanoTransaction | undefined> {\n    const tx = this.cardanoTransactions.get(txHash);\n    if (!tx) return undefined;\n    \n    const updated = { ...tx, ...updates };\n    this.cardanoTransactions.set(txHash, updated);\n    return updated;\n  }\n\n  async getReferral(code: string): Promise<Referral | undefined> {\n    return Array.from(this.referrals.values()).find(ref => ref.code === code);\n  }\n\n  async getReferralsByWallet(walletAddress: string): Promise<Referral[]> {\n    return Array.from(this.referrals.values()).filter(ref => ref.walletAddress === walletAddress);\n  }\n\n  async createReferral(insertReferral: InsertReferral): Promise<Referral> {\n    const id = randomUUID();\n    const referral: Referral = { \n      ...insertReferral, \n      id, \n      clickCount: 0, \n      createdAt: new Date() \n    };\n    this.referrals.set(id, referral);\n    return referral;\n  }\n\n  async incrementReferralClick(code: string): Promise<void> {\n    const referral = await this.getReferral(code);\n    if (referral) {\n      referral.clickCount = (referral.clickCount || 0) + 1;\n      this.referrals.set(referral.id, referral);\n    }\n  }\n\n  async getGameScores(walletAddress: string, game: string): Promise<GameScore[]> {\n    return Array.from(this.gameScores.values())\n      .filter(score => score.walletAddress === walletAddress && score.game === game)\n      .sort((a, b) => b.score - a.score);\n  }\n\n  async getHighScore(walletAddress: string, game: string): Promise<number> {\n    const scores = await this.getGameScores(walletAddress, game);\n    return scores.length > 0 ? scores[0].score : 0;\n  }\n\n  async createGameScore(insertScore: InsertGameScore): Promise<GameScore> {\n    const id = randomUUID();\n    const score: GameScore = { \n      ...insertScore, \n      id, \n      createdAt: new Date() \n    };\n    this.gameScores.set(id, score);\n    return score;\n  }\n\n  async getSkillReward(walletAddress: string): Promise<SkillReward | undefined> {\n    return Array.from(this.skillRewards.values()).find(reward => reward.walletAddress === walletAddress);\n  }\n\n  async createSkillReward(insertReward: InsertSkillReward): Promise<SkillReward> {\n    const id = randomUUID();\n    const reward: SkillReward = { \n      ...insertReward, \n      id, \n      updatedAt: new Date() \n    };\n    this.skillRewards.set(id, reward);\n    return reward;\n  }\n\n  async updateSkillReward(walletAddress: string, updates: Partial<SkillReward>): Promise<SkillReward | undefined> {\n    const reward = await this.getSkillReward(walletAddress);\n    if (!reward) return undefined;\n    \n    const updated = { ...reward, ...updates, updatedAt: new Date() };\n    this.skillRewards.set(reward.id, updated);\n    return updated;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":13196},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, decimal, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  walletAddress: text(\"wallet_address\"),\n  lemmiTokens: decimal(\"lemmi_tokens\", { precision: 18, scale: 8 }).default(\"0\"),\n  adaBalance: decimal(\"ada_balance\", { precision: 18, scale: 6 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const wallets = pgTable(\"wallets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  address: text(\"address\").notNull().unique(),\n  chain: text(\"chain\").notNull(), // 'cardano' for Lace wallet\n  hasGerbilNft: boolean(\"has_gerbil_nft\").default(false),\n  lemmiBalance: integer(\"lemmi_balance\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const gerbilNfts = pgTable(\"gerbil_nfts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tokenId: text(\"token_id\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  rarity: text(\"rarity\").notNull(), // Common, Uncommon, Rare, Epic, Legendary\n  attributes: jsonb(\"attributes\").$type<string[]>().notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  cardanoScanUrl: text(\"cardano_scan_url\"),\n  ownerId: varchar(\"owner_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const cardanoTransactions = pgTable(\"cardano_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  txHash: text(\"tx_hash\").notNull().unique(),\n  type: text(\"type\").notNull(), // sent, received, nft_transfer, smart_contract\n  amount: decimal(\"amount\", { precision: 18, scale: 8 }).notNull(),\n  token: text(\"token\").notNull(), // ADA, LEMMI\n  fromAddress: text(\"from_address\"),\n  toAddress: text(\"to_address\").notNull(),\n  status: text(\"status\").default(\"pending\").notNull(), // pending, confirmed, failed\n  cardanoScanUrl: text(\"cardano_scan_url\").notNull(),\n  nftData: jsonb(\"nft_data\").$type<{ name: string; image: string }>(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const referrals = pgTable(\"referrals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(),\n  walletAddress: text(\"wallet_address\").notNull(),\n  clickCount: integer(\"click_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const gameScores = pgTable(\"game_scores\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  walletAddress: text(\"wallet_address\").notNull(),\n  game: text(\"game\").notNull(), // 'lemmi_run', 'nft_explorer'\n  score: integer(\"score\").notNull(),\n  level: integer(\"level\").default(1),\n  achievements: jsonb(\"achievements\").$type<string[]>().default([]),\n  playTime: integer(\"play_time_seconds\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const skillRewards = pgTable(\"skill_rewards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  walletAddress: text(\"wallet_address\").notNull(),\n  neuralSync: integer(\"neural_sync\").default(0),\n  efficiency: integer(\"efficiency\").default(0),\n  totalRewards: integer(\"total_rewards\").default(0),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  gerbilNfts: many(gerbilNfts),\n  transactions: many(cardanoTransactions),\n}));\n\nexport const gerbilNftsRelations = relations(gerbilNfts, ({ one }) => ({\n  owner: one(users, {\n    fields: [gerbilNfts.ownerId],\n    references: [users.id],\n  }),\n}));\n\nexport const cardanoTransactionsRelations = relations(cardanoTransactions, ({ one }) => ({\n  user: one(users, {\n    fields: [cardanoTransactions.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  walletAddress: true,\n});\n\nexport const insertWalletSchema = createInsertSchema(wallets).pick({\n  address: true,\n  chain: true,\n  hasGerbilNft: true,\n  lemmiBalance: true,\n});\n\nexport const insertGerbilNftSchema = createInsertSchema(gerbilNfts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCardanoTransactionSchema = createInsertSchema(cardanoTransactions).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertReferralSchema = createInsertSchema(referrals).pick({\n  code: true,\n  walletAddress: true,\n});\n\nexport const insertGameScoreSchema = createInsertSchema(gameScores).pick({\n  walletAddress: true,\n  game: true,\n  score: true,\n  level: true,\n  achievements: true,\n  playTime: true,\n});\n\nexport const insertSkillRewardSchema = createInsertSchema(skillRewards).pick({\n  walletAddress: true,\n  neuralSync: true,\n  efficiency: true,\n  totalRewards: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertWallet = z.infer<typeof insertWalletSchema>;\nexport type Wallet = typeof wallets.$inferSelect;\nexport type GerbilNft = typeof gerbilNfts.$inferSelect;\nexport type InsertGerbilNft = z.infer<typeof insertGerbilNftSchema>;\nexport type CardanoTransaction = typeof cardanoTransactions.$inferSelect;\nexport type InsertCardanoTransaction = z.infer<typeof insertCardanoTransactionSchema>;\nexport type InsertReferral = z.infer<typeof insertReferralSchema>;\nexport type Referral = typeof referrals.$inferSelect;\nexport type InsertGameScore = z.infer<typeof insertGameScoreSchema>;\nexport type GameScore = typeof gameScores.$inferSelect;\nexport type InsertSkillReward = z.infer<typeof insertSkillRewardSchema>;\nexport type SkillReward = typeof skillRewards.$inferSelect;\n\n// Wallet interface for frontend\nexport interface WalletState {\n  walletAddress: string | null;\n  isConnected: boolean;\n  hasGerbilNft: boolean;\n  lemmiBalance: number;\n  chain: 'cardano' | null;\n}\n\n// Lace Wallet API Types for Cardano\ndeclare global {\n  interface Window {\n    cardano?: {\n      lace?: {\n        enable(): Promise<any>;\n        isEnabled(): Promise<boolean>;\n        getUsedAddresses(): Promise<string[]>;\n        getUnusedAddresses(): Promise<string[]>;\n        getBalance(): Promise<string>;\n        getUtxos(): Promise<any[]>;\n        signTx(tx: string): Promise<string>;\n        submitTx(tx: string): Promise<string>;\n      };\n    };\n  }\n}\n","size_bytes":6725},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NeuralInterface from \"@/pages/neural-interface\";\nimport GameSystem from \"@/pages/GameSystem\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={NeuralInterface} />\n      <Route path=\"/game\" component={GameSystem} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":830},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Rajdhani:wght@300;400;600&family=JetBrains+Mono:wght@400;600&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(240, 8%, 4%);\n  --foreground: hsl(200, 7%, 91%);\n  --card: hsl(228, 10%, 10%);\n  --card-foreground: hsl(0, 0%, 85%);\n  --popover: hsl(240, 8%, 4%);\n  --popover-foreground: hsl(200, 7%, 91%);\n  --primary: hsl(180, 100%, 50%);\n  --primary-foreground: hsl(240, 8%, 4%);\n  --secondary: hsl(195, 15%, 95%);\n  --secondary-foreground: hsl(210, 25%, 8%);\n  --muted: hsl(0, 0%, 9%);\n  --muted-foreground: hsl(210, 4%, 46%);\n  --accent: hsl(206, 70%, 8%);\n  --accent-foreground: hsl(204, 88%, 53%);\n  --destructive: hsl(356, 91%, 54%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5%, 15%);\n  --input: hsl(208, 28%, 18%);\n  --ring: hsl(203, 89%, 53%);\n  --chart-1: hsl(204, 88%, 53%);\n  --chart-2: hsl(160, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(228, 10%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85%);\n  --sidebar-primary: hsl(203, 89%, 53%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(206, 70%, 8%);\n  --sidebar-accent-foreground: hsl(204, 88%, 53%);\n  --sidebar-border: hsl(206, 16%, 26%);\n  --sidebar-ring: hsl(203, 89%, 53%);\n  --font-sans: 'Rajdhani', sans-serif;\n  --font-orbitron: 'Orbitron', sans-serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: 0.75rem;\n  \n  /* Cyberpunk Colors */\n  --cyber-cyan: hsl(180, 100%, 50%);\n  --cyber-magenta: hsl(300, 100%, 50%);\n  --cyber-green: hsl(152, 100%, 50%);\n  --cyber-gold: hsl(51, 100%, 50%);\n  --cyber-blue: hsl(225, 39%, 15%);\n  --cyber-dark: hsl(240, 33%, 6%);\n  --cyber-purple: hsl(225, 46%, 18%);\n}\n\n.dark {\n  --background: hsl(240, 8%, 4%);\n  --foreground: hsl(200, 7%, 91%);\n  --card: hsl(228, 10%, 10%);\n  --card-foreground: hsl(0, 0%, 85%);\n  --popover: hsl(240, 8%, 4%);\n  --popover-foreground: hsl(200, 7%, 91%);\n  --primary: hsl(180, 100%, 50%);\n  --primary-foreground: hsl(240, 8%, 4%);\n  --secondary: hsl(195, 15%, 95%);\n  --secondary-foreground: hsl(210, 25%, 8%);\n  --muted: hsl(0, 0%, 9%);\n  --muted-foreground: hsl(210, 4%, 46%);\n  --accent: hsl(206, 70%, 8%);\n  --accent-foreground: hsl(204, 88%, 53%);\n  --destructive: hsl(356, 91%, 54%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5%, 15%);\n  --input: hsl(208, 28%, 18%);\n  --ring: hsl(203, 89%, 53%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    background: linear-gradient(135deg, var(--cyber-dark) 0%, var(--cyber-blue) 50%, var(--cyber-purple) 100%);\n    min-height: 100vh;\n  }\n}\n\n@layer components {\n  .font-orbitron {\n    font-family: var(--font-orbitron);\n  }\n  \n  .font-mono {\n    font-family: var(--font-mono);\n  }\n  \n  .glass-morph {\n    background: rgba(26, 26, 46, 0.3);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(0, 255, 255, 0.2);\n  }\n  \n  .neon-border {\n    border: 1px solid var(--cyber-cyan);\n    box-shadow: 0 0 10px rgba(0, 255, 255, 0.3);\n  }\n  \n  .cyber-glow {\n    box-shadow: 0 0 5px var(--cyber-cyan), 0 0 10px var(--cyber-cyan), 0 0 15px var(--cyber-cyan);\n  }\n  \n  .cyber-glow-hover:hover {\n    box-shadow: 0 0 10px var(--cyber-cyan), 0 0 20px var(--cyber-cyan), 0 0 30px var(--cyber-cyan);\n    transition: box-shadow 0.3s ease;\n  }\n}\n\n@layer utilities {\n  .animate-glow {\n    animation: glow 2s ease-in-out infinite alternate;\n  }\n  \n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n  \n  .animate-pulse-slow {\n    animation: pulse 3s ease-in-out infinite;\n  }\n  \n  .animate-glitch {\n    animation: glitch 0.3s ease-in-out infinite alternate;\n  }\n  \n  .animate-typewriter {\n    animation: typewriter 3s steps(40) infinite;\n  }\n  \n  .text-cyber-cyan {\n    color: var(--cyber-cyan);\n  }\n  \n  .text-cyber-magenta {\n    color: var(--cyber-magenta);\n  }\n  \n  .text-cyber-green {\n    color: var(--cyber-green);\n  }\n  \n  .text-cyber-gold {\n    color: var(--cyber-gold);\n  }\n  \n  .bg-cyber-cyan {\n    background-color: var(--cyber-cyan);\n  }\n  \n  .bg-cyber-magenta {\n    background-color: var(--cyber-magenta);\n  }\n  \n  .bg-cyber-green {\n    background-color: var(--cyber-green);\n  }\n  \n  .bg-cyber-gold {\n    background-color: var(--cyber-gold);\n  }\n  \n  .bg-cyber-dark {\n    background-color: var(--cyber-dark);\n  }\n  \n  .border-cyber-cyan {\n    border-color: var(--cyber-cyan);\n  }\n}\n\n@keyframes glow {\n  0% { \n    box-shadow: 0 0 5px var(--cyber-cyan), 0 0 10px var(--cyber-cyan), 0 0 15px var(--cyber-cyan);\n  }\n  100% { \n    box-shadow: 0 0 10px var(--cyber-cyan), 0 0 20px var(--cyber-cyan), 0 0 30px var(--cyber-cyan);\n  }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n\n@keyframes pulse {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.5; }\n}\n\n@keyframes glitch {\n  0% { transform: translateX(0); }\n  20% { transform: translateX(-2px); }\n  40% { transform: translateX(2px); }\n  60% { transform: translateX(-1px); }\n  80% { transform: translateX(1px); }\n  100% { transform: translateX(0); }\n}\n\n@keyframes typewriter {\n  0%, 50% { border-right-color: transparent; }\n  51%, 100% { border-right-color: var(--cyber-cyan); }\n}\n\n@keyframes unity-scan {\n  0% { transform: translateX(-100%); }\n  100% { transform: translateX(100%); }\n}\n\n@keyframes unity-flicker {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.7; }\n}\n\n@keyframes unity-border-glow {\n  0%, 100% { \n    border-color: rgba(255, 165, 0, 0.5);\n    box-shadow: 0 0 10px rgba(255, 165, 0, 0.2);\n  }\n  50% { \n    border-color: rgba(255, 165, 0, 1);\n    box-shadow: 0 0 20px rgba(255, 165, 0, 0.4), inset 0 0 10px rgba(255, 165, 0, 0.1);\n  }\n}\n\n@keyframes unity-panel-slide {\n  from { transform: translateY(-10px); opacity: 0; }\n  to { transform: translateY(0); opacity: 1; }\n}\n\n/* Unity-style HUD elements */\n.unity-hud-panel {\n  background: \n    linear-gradient(135deg, rgba(0, 0, 0, 0.95) 0%, rgba(15, 15, 20, 0.95) 50%, rgba(0, 0, 0, 0.95) 100%),\n    repeating-linear-gradient(\n      90deg,\n      transparent,\n      transparent 2px,\n      rgba(255, 165, 0, 0.02) 2px,\n      rgba(255, 165, 0, 0.02) 4px\n    );\n  border: 1px solid rgba(255, 165, 0, 0.8);\n  border-radius: 0px;\n  box-shadow: \n    0 0 15px rgba(255, 165, 0, 0.3), \n    inset 0 0 15px rgba(0, 0, 0, 0.8),\n    0 2px 0 rgba(255, 165, 0, 0.4),\n    0 -2px 0 rgba(255, 165, 0, 0.4);\n  backdrop-filter: blur(8px);\n  position: relative;\n}\n\n.unity-button {\n  background: \n    linear-gradient(145deg, rgba(30, 30, 30, 0.9), rgba(15, 15, 15, 0.9)),\n    linear-gradient(90deg, rgba(255, 165, 0, 0.1) 0%, rgba(255, 165, 0, 0.2) 50%, rgba(255, 165, 0, 0.1) 100%);\n  border: 1px solid rgba(255, 165, 0, 0.7);\n  border-radius: 0px;\n  transition: all 0.2s ease;\n  position: relative;\n  overflow: hidden;\n  box-shadow: \n    0 2px 4px rgba(0, 0, 0, 0.5),\n    inset 0 1px 0 rgba(255, 165, 0, 0.3),\n    inset 0 -1px 0 rgba(255, 165, 0, 0.3);\n}\n\n.unity-button:hover {\n  background: \n    linear-gradient(145deg, rgba(40, 40, 40, 0.9), rgba(25, 25, 25, 0.9)),\n    linear-gradient(90deg, rgba(255, 165, 0, 0.2) 0%, rgba(255, 165, 0, 0.4) 50%, rgba(255, 165, 0, 0.2) 100%);\n  border-color: rgba(255, 165, 0, 1);\n  transform: translateY(-1px);\n  box-shadow: \n    0 4px 8px rgba(0, 0, 0, 0.6),\n    0 0 15px rgba(255, 165, 0, 0.4),\n    inset 0 1px 0 rgba(255, 165, 0, 0.5),\n    inset 0 -1px 0 rgba(255, 165, 0, 0.5);\n}\n\n.unity-button::before {\n  content: '';\n  position: absolute;\n  top: -50%;\n  left: -50%;\n  width: 200%;\n  height: 200%;\n  background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);\n  transform: rotate(45deg) translateX(-100%);\n  transition: transform 0.6s;\n}\n\n.unity-button:hover::before {\n  transform: rotate(45deg) translateX(100%);\n}\n\n.unity-scan {\n  position: relative;\n  overflow: hidden;\n}\n\n.unity-scan::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(90deg, transparent, rgba(0, 255, 255, 0.3), transparent);\n  animation: unity-scan 3s infinite;\n}\n\n.unity-flicker {\n  animation: unity-flicker 0.15s infinite alternate;\n}\n\n.unity-border-glow {\n  animation: unity-border-glow 2s ease-in-out infinite;\n}\n\n.unity-panel-slide {\n  animation: unity-panel-slide 0.5s ease-out;\n}\n\n/* Unity-style status indicators */\n.unity-status-online {\n  background: radial-gradient(circle, rgba(0, 255, 0, 0.8) 0%, rgba(0, 200, 0, 0.4) 100%);\n  box-shadow: 0 0 10px rgba(0, 255, 0, 0.6);\n}\n\n.unity-status-offline {\n  background: radial-gradient(circle, rgba(255, 0, 0, 0.8) 0%, rgba(200, 0, 0, 0.4) 100%);\n  box-shadow: 0 0 10px rgba(255, 0, 0, 0.6);\n}\n\n/* Scanline overlay */\n.scanline-overlay::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 2px;\n  background: linear-gradient(90deg, transparent, var(--cyber-cyan), transparent);\n  animation: scanline 2s linear infinite;\n  z-index: 1;\n}\n\n@keyframes scanline {\n  0% { transform: translateY(-100%); }\n  100% { transform: translateY(100vh); }\n}\n\n/* Terminal text cursor */\n.terminal-text {\n  border-right: 2px solid var(--cyber-cyan);\n  animation: typewriter 3s steps(40) infinite;\n}\n\n/* Grid overlay */\n.grid-overlay {\n  background-image: \n    repeating-linear-gradient(0deg, transparent, transparent 98px, rgba(0, 255, 255, 0.1) 100px),\n    repeating-linear-gradient(90deg, transparent, transparent 98px, rgba(0, 255, 255, 0.1) 100px);\n}\n\n/* Retro CRT Scanlines Animation */\n@keyframes scanlines {\n  0% { transform: translateY(0); }\n  100% { transform: translateY(4px); }\n}\n\n/* Retro Glitch Effect */\n@keyframes glitch {\n  0%, 100% { transform: translate(0); }\n  2% { transform: translate(-2px, 2px); }\n  4% { transform: translate(-2px, -2px); }\n  6% { transform: translate(2px, 2px); }\n  8% { transform: translate(2px, -2px); }\n  10% { transform: translate(0); }\n}\n\n/* Terminal Cursor Blink */\n@keyframes blink {\n  0%, 50% { opacity: 1; }\n  51%, 100% { opacity: 0; }\n}\n\n/* CRT Screen Effect */\n.crt-screen {\n  position: relative;\n}\n\n.crt-screen::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: repeating-linear-gradient(\n    0deg,\n    transparent,\n    transparent 2px,\n    rgba(0, 255, 255, 0.02) 2px,\n    rgba(0, 255, 255, 0.02) 4px\n  );\n  pointer-events: none;\n  z-index: 1;\n  animation: scanlines 2s linear infinite;\n}\n\n/* HD Character Animation Styles */\n.hd-character-container {\n  position: relative;\n  overflow: hidden;\n  border-radius: 0;\n  image-rendering: -moz-crisp-edges;\n  image-rendering: -webkit-crisp-edges;\n  image-rendering: pixelated;\n  image-rendering: crisp-edges;\n}\n\n.hd-character-canvas {\n  width: 100%;\n  height: 100%;\n  object-fit: contain;\n  image-rendering: auto;\n  image-rendering: high-quality;\n  image-rendering: -webkit-optimize-contrast;\n}\n\n/* Particle glow effects */\n.particle-glow {\n  box-shadow: 0 0 4px rgba(0, 255, 255, 0.8), 0 0 8px rgba(0, 255, 255, 0.4);\n}\n\n/* Neural interface glow */\n.neural-glow {\n  box-shadow: 0 0 10px rgba(0, 255, 255, 0.3), 0 0 20px rgba(0, 255, 255, 0.1);\n  animation: pulse-glow 2s ease-in-out infinite alternate;\n}\n\n@keyframes pulse-glow {\n  0% { box-shadow: 0 0 10px rgba(0, 255, 255, 0.3), 0 0 20px rgba(0, 255, 255, 0.1); }\n  100% { box-shadow: 0 0 15px rgba(0, 255, 255, 0.5), 0 0 30px rgba(0, 255, 255, 0.2); }\n}\n","size_bytes":11482},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/CardanoTransactionTracker.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface Transaction {\n  id: string;\n  hash: string;\n  type: 'sent' | 'received' | 'nft_transfer' | 'smart_contract';\n  amount: string;\n  token: 'ADA' | 'LEMMI';\n  timestamp: string;\n  status: 'confirmed' | 'pending' | 'failed';\n  cardanoScanUrl: string;\n  fromAddress?: string;\n  toAddress?: string;\n  nftData?: {\n    name: string;\n    image: string;\n  };\n}\n\n// Mock transaction data - In real implementation, this would come from Cardano API\nconst MOCK_TRANSACTIONS: Transaction[] = [\n  {\n    id: \"tx1\",\n    hash: \"4a2b8c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b\",\n    type: \"received\",\n    amount: \"150.75\",\n    token: \"ADA\",\n    timestamp: \"2024-01-07 14:23:15\",\n    status: \"confirmed\",\n    cardanoScanUrl: \"https://cardanoscan.io/transaction/4a2b8c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b\",\n    fromAddress: \"addr1q9x2z3a4b5c6d7e8f9g0h1i2j3k4l5m6n7o8p9q0r1s2t3u4v5w6x7y8z9a0b1c\",\n    toAddress: \"Your Wallet\"\n  },\n  {\n    id: \"tx2\",\n    hash: \"1b0a9f8e7d6c5b4a3f2e1d0c9b8a7f6e5d4c3b2a1f0e9d8c7b6a5f4e3d2c1b0a\",\n    type: \"nft_transfer\",\n    amount: \"1\",\n    token: \"LEMMI\",\n    timestamp: \"2024-01-07 13:15:42\",\n    status: \"confirmed\",\n    cardanoScanUrl: \"https://cardanoscan.io/transaction/1b0a9f8e7d6c5b4a3f2e1d0c9b8a7f6e5d4c3b2a1f0e9d8c7b6a5f4e3d2c1b0a\",\n    fromAddress: \"addr1q8x1y2z3a4b5c6d7e8f9g0h1i2j3k4l5m6n7o8p9q0r1s2t3u4v5w6x7y8z9a0\",\n    toAddress: \"Your Wallet\",\n    nftData: {\n      name: \"Jeff - Laser Eyes Gerbil\",\n      image: \"/gerbil-jeff.png\"\n    }\n  },\n  {\n    id: \"tx3\",\n    hash: \"2c1b0a9f8e7d6c5b4a3f2e1d0c9b8a7f6e5d4c3b2a1f0e9d8c7b6a5f4e3d2c1b\",\n    type: \"sent\",\n    amount: \"50.25\",\n    token: \"ADA\",\n    timestamp: \"2024-01-07 12:08:30\",\n    status: \"confirmed\",\n    cardanoScanUrl: \"https://cardanoscan.io/transaction/2c1b0a9f8e7d6c5b4a3f2e1d0c9b8a7f6e5d4c3b2a1f0e9d8c7b6a5f4e3d2c1b\",\n    fromAddress: \"Your Wallet\",\n    toAddress: \"addr1q7w6v5u4t3s2r1q0p9o8n7m6l5k4j3i2h1g0f9e8d7c6b5a4z3y2x1w0v9u8t\"\n  },\n  {\n    id: \"tx4\",\n    hash: \"3d2c1b0a9f8e7d6c5b4a3f2e1d0c9b8a7f6e5d4c3b2a1f0e9d8c7b6a5f4e3d2c\",\n    type: \"smart_contract\",\n    amount: \"2500\",\n    token: \"LEMMI\",\n    timestamp: \"2024-01-07 11:42:18\",\n    status: \"confirmed\",\n    cardanoScanUrl: \"https://cardanoscan.io/transaction/3d2c1b0a9f8e7d6c5b4a3f2e1d0c9b8a7f6e5d4c3b2a1f0e9d8c7b6a5f4e3d2c\",\n    fromAddress: \"Lemmi Protocol\",\n    toAddress: \"Your Wallet\"\n  },\n  {\n    id: \"tx5\",\n    hash: \"4e3d2c1b0a9f8e7d6c5b4a3f2e1d0c9b8a7f6e5d4c3b2a1f0e9d8c7b6a5f4e3d\",\n    type: \"received\",\n    amount: \"75.00\",\n    token: \"ADA\",\n    timestamp: \"2024-01-06 18:30:45\",\n    status: \"pending\",\n    cardanoScanUrl: \"https://cardanoscan.io/transaction/4e3d2c1b0a9f8e7d6c5b4a3f2e1d0c9b8a7f6e5d4c3b2a1f0e9d8c7b6a5f4e3d\",\n    fromAddress: \"addr1q6v5u4t3s2r1q0p9o8n7m6l5k4j3i2h1g0f9e8d7c6b5a4z3y2x1w0v9u8t7s\",\n    toAddress: \"Your Wallet\"\n  }\n];\n\nconst getTransactionIcon = (type: string) => {\n  switch (type) {\n    case 'sent': return 'üì§';\n    case 'received': return 'üì•';\n    case 'nft_transfer': return 'üñºÔ∏è';\n    case 'smart_contract': return 'üìÑ';\n    default: return 'üíº';\n  }\n};\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case 'confirmed': return 'text-green-400 bg-green-400/10';\n    case 'pending': return 'text-yellow-400 bg-yellow-400/10';\n    case 'failed': return 'text-red-400 bg-red-400/10';\n    default: return 'text-gray-400 bg-gray-400/10';\n  }\n};\n\nconst getTypeColor = (type: string) => {\n  switch (type) {\n    case 'sent': return 'text-red-400';\n    case 'received': return 'text-green-400';\n    case 'nft_transfer': return 'text-purple-400';\n    case 'smart_contract': return 'text-blue-400';\n    default: return 'text-gray-400';\n  }\n};\n\ninterface CardanoTransactionTrackerProps {\n  walletAddress: string | null;\n}\n\nexport default function CardanoTransactionTracker({ walletAddress }: CardanoTransactionTrackerProps) {\n  const [selectedTx, setSelectedTx] = useState<Transaction | null>(null);\n  const [filter, setFilter] = useState<'all' | 'sent' | 'received' | 'nft_transfer' | 'smart_contract'>('all');\n\n  // Simulate real-time transaction fetching\n  const { data: transactions, isLoading } = useQuery({\n    queryKey: ['/api/cardano/transactions', walletAddress],\n    enabled: !!walletAddress,\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const filteredTransactions = MOCK_TRANSACTIONS.filter(tx => \n    filter === 'all' || tx.type === filter\n  );\n\n  const openCardanoScan = (url: string) => {\n    window.open(url, '_blank');\n  };\n\n  if (!walletAddress) {\n    return (\n      <div className=\"text-center p-8\">\n        <div className=\"text-6xl mb-4\">üîó</div>\n        <p className=\"text-gray-400 font-mono\">Connect Lace Wallet to track Cardano transactions</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"text-center\">\n        <h2 className=\"text-2xl font-orbitron font-bold text-orange-400 mb-2\">\n          üîó CARDANO TRANSACTION TRACKER\n        </h2>\n        <p className=\"text-sm text-gray-400 font-mono\">\n          Real-time blockchain transaction monitoring\n        </p>\n      </div>\n\n      {/* Filter Buttons */}\n      <div className=\"flex flex-wrap justify-center gap-2 mb-6\">\n        {(['all', 'sent', 'received', 'nft_transfer', 'smart_contract'] as const).map((filterType) => (\n          <Button\n            key={filterType}\n            size=\"sm\"\n            variant={filter === filterType ? 'default' : 'outline'}\n            className={`${\n              filter === filterType \n                ? 'bg-orange-500/20 border-orange-500 text-orange-400' \n                : 'border-gray-600 text-gray-400 hover:border-orange-500/50'\n            }`}\n            onClick={() => setFilter(filterType)}\n          >\n            {getTransactionIcon(filterType)} {filterType.replace('_', ' ').toUpperCase()}\n          </Button>\n        ))}\n      </div>\n\n      {/* Transaction List */}\n      <div className=\"space-y-3\">\n        {isLoading ? (\n          <div className=\"text-center py-8\">\n            <div className=\"animate-spin text-4xl mb-2\">‚è≥</div>\n            <p className=\"text-gray-400 font-mono\">Loading transactions...</p>\n          </div>\n        ) : (\n          filteredTransactions.map((tx) => (\n            <div \n              key={tx.id}\n              className={`bg-black/60 rounded-lg border-2 p-4 cursor-pointer transition-all duration-300 hover:border-orange-400/50 ${\n                selectedTx?.id === tx.id ? 'border-orange-500' : 'border-gray-600'\n              }`}\n              onClick={() => setSelectedTx(selectedTx?.id === tx.id ? null : tx)}\n            >\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center space-x-3\">\n                  <span className=\"text-2xl\">{getTransactionIcon(tx.type)}</span>\n                  <div>\n                    <p className={`font-mono text-sm font-bold ${getTypeColor(tx.type)}`}>\n                      {tx.type.replace('_', ' ').toUpperCase()}\n                    </p>\n                    <p className=\"text-xs text-gray-500 font-mono\">\n                      {tx.timestamp}\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"text-right\">\n                  <p className={`font-mono font-bold ${tx.type === 'sent' ? 'text-red-400' : 'text-green-400'}`}>\n                    {tx.type === 'sent' ? '-' : '+'}{tx.amount} {tx.token}\n                  </p>\n                  <span className={`px-2 py-1 rounded text-xs font-mono ${getStatusColor(tx.status)}`}>\n                    {tx.status.toUpperCase()}\n                  </span>\n                </div>\n              </div>\n\n              {/* Transaction Hash */}\n              <div className=\"flex items-center justify-between\">\n                <p className=\"text-xs text-gray-400 font-mono truncate max-w-xs\">\n                  Hash: {tx.hash}\n                </p>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  className=\"text-xs border-orange-500/50 text-orange-400 hover:bg-orange-500/10\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    openCardanoScan(tx.cardanoScanUrl);\n                  }}\n                >\n                  üìä CARDANOSCAN\n                </Button>\n              </div>\n\n              {/* Expanded Details */}\n              {selectedTx?.id === tx.id && (\n                <div className=\"mt-4 pt-4 border-t border-gray-600 space-y-3\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-gray-400 font-mono\">From:</span>\n                      <p className=\"text-white font-mono break-all\">{tx.fromAddress}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-400 font-mono\">To:</span>\n                      <p className=\"text-white font-mono break-all\">{tx.toAddress}</p>\n                    </div>\n                  </div>\n\n                  {tx.nftData && (\n                    <div className=\"bg-gray-800/50 rounded p-3\">\n                      <span className=\"text-gray-400 font-mono text-sm\">NFT Data:</span>\n                      <p className=\"text-purple-400 font-mono\">{tx.nftData.name}</p>\n                    </div>\n                  )}\n\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      className=\"bg-orange-500/20 border border-orange-500 text-orange-400 hover:bg-orange-500/30\"\n                      onClick={() => openCardanoScan(tx.cardanoScanUrl)}\n                    >\n                      üîç VIEW FULL DETAILS\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"border-gray-600 text-gray-400\"\n                      onClick={() => navigator.clipboard.writeText(tx.hash)}\n                    >\n                      üìã COPY HASH\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          ))\n        )}\n      </div>\n\n      {/* Summary Stats */}\n      <div className=\"bg-black/80 rounded-lg border border-gray-600 p-4\">\n        <h3 className=\"font-orbitron font-bold text-orange-400 mb-3\">Transaction Summary</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n          <div>\n            <p className=\"text-2xl font-bold text-green-400\">{filteredTransactions.filter(tx => tx.type === 'received').length}</p>\n            <p className=\"text-xs text-gray-400 font-mono\">Received</p>\n          </div>\n          <div>\n            <p className=\"text-2xl font-bold text-red-400\">{filteredTransactions.filter(tx => tx.type === 'sent').length}</p>\n            <p className=\"text-xs text-gray-400 font-mono\">Sent</p>\n          </div>\n          <div>\n            <p className=\"text-2xl font-bold text-purple-400\">{filteredTransactions.filter(tx => tx.type === 'nft_transfer').length}</p>\n            <p className=\"text-xs text-gray-400 font-mono\">NFTs</p>\n          </div>\n          <div>\n            <p className=\"text-2xl font-bold text-blue-400\">{filteredTransactions.filter(tx => tx.type === 'smart_contract').length}</p>\n            <p className=\"text-xs text-gray-400 font-mono\">Contracts</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11706},"client/src/components/CharacterSelection.tsx":{"content":"import { useState } from 'react';\n\ninterface Character {\n  id: string;\n  name: string;\n  image: string;\n  description: string;\n  stats: {\n    speed: number;\n    jump: number;\n    special: number;\n  };\n}\n\ninterface CharacterSelectionProps {\n  onCharacterSelect: (character: Character) => void;\n  onBack: () => void;\n}\n\nexport function CharacterSelection({ onCharacterSelect, onBack }: CharacterSelectionProps) {\n  const characters: Character[] = [\n    {\n      id: 'ashina',\n      name: 'KING LEMMI',\n      image: '',\n      description: 'Royal warrior with balanced abilities',\n      stats: { speed: 8, jump: 7, special: 9 }\n    },\n    {\n      id: 'cowboy',\n      name: 'COWBOY GERBIL',\n      image: '',\n      description: 'Quick draw specialist',\n      stats: { speed: 9, jump: 6, special: 7 }\n    },\n    {\n      id: 'snow',\n      name: 'SNOW GERBIL',\n      image: '',\n      description: 'Ice powers and agility',\n      stats: { speed: 7, jump: 9, special: 8 }\n    },\n    {\n      id: 'grim',\n      name: 'GRIM REAPER',\n      image: '',\n      description: 'Dark magic wielder',\n      stats: { speed: 6, jump: 8, special: 10 }\n    }\n  ];\n\n  const [selectedCharacter, setSelectedCharacter] = useState<Character | null>(null);\n\n  return (\n    <div className=\"fixed inset-0 bg-black flex flex-col\">\n      {/* Header */}\n      <div className=\"h-20 bg-black border-b-2 border-orange-400 relative flex items-center justify-between px-8\">\n        <div className=\"absolute top-0 left-0 w-6 h-6 border-t-2 border-l-2 border-orange-400\"></div>\n        <div className=\"absolute top-0 right-0 w-6 h-6 border-t-2 border-r-2 border-orange-400\"></div>\n        \n        <button\n          onClick={onBack}\n          className=\"bg-black border border-red-400 px-6 py-2 text-red-400 font-orbitron font-bold tracking-wider hover:bg-red-900/20 relative\"\n        >\n          <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-red-400\"></div>\n          <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-red-400\"></div>\n          BACK\n        </button>\n\n        <h1 className=\"text-3xl font-orbitron font-black text-orange-400 tracking-widest\">\n          CHARACTER SELECTION\n        </h1>\n\n        <div className=\"w-24\"></div>\n      </div>\n\n      {/* Character Grid */}\n      <div className=\"flex-1 p-8\">\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 mb-8\">\n          {characters.map((character) => (\n            <div\n              key={character.id}\n              onClick={() => setSelectedCharacter(character)}\n              className={`bg-black border-2 cursor-pointer transition-all duration-200 relative ${\n                selectedCharacter?.id === character.id\n                  ? 'border-orange-400 bg-orange-900/20'\n                  : 'border-gray-600 hover:border-orange-400'\n              }`}\n            >\n              {selectedCharacter?.id === character.id && (\n                <>\n                  <div className=\"absolute -top-1 -left-1 w-3 h-3 bg-orange-400\"></div>\n                  <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-orange-400\"></div>\n                  <div className=\"absolute -bottom-1 -left-1 w-3 h-3 bg-orange-400\"></div>\n                  <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-orange-400\"></div>\n                </>\n              )}\n              \n              <div className=\"p-4\">\n                <div className=\"w-full h-48 mb-4 bg-gray-900 border border-gray-700 flex items-center justify-center relative\">\n                  {character.image ? (\n                    <img \n                      src={character.image} \n                      alt={character.name} \n                      className=\"max-w-full max-h-full object-contain\"\n                      onError={(e) => {\n                        e.currentTarget.style.display = 'none';\n                        if (e.currentTarget.nextSibling) {\n                          (e.currentTarget.nextSibling as HTMLElement).style.display = 'flex';\n                        }\n                      }}\n                    />\n                  ) : null}\n                  <div \n                    className=\"absolute inset-0 flex items-center justify-center text-orange-400 font-orbitron font-bold text-2xl\"\n                    style={{ display: character.image ? 'none' : 'flex' }}\n                  >\n                    {character.id === 'ashina' && 'üëë'}\n                    {character.id === 'cowboy' && 'ü§†'}\n                    {character.id === 'snow' && '‚ùÑÔ∏è'}\n                    {character.id === 'grim' && 'üíÄ'}\n                  </div>\n                </div>\n                \n                <h3 className=\"font-orbitron font-bold text-orange-400 text-center mb-2 tracking-wider\">\n                  {character.name}\n                </h3>\n                \n                <div className=\"space-y-1 text-xs font-mono\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-blue-400\">SPEED:</span>\n                    <div className=\"flex space-x-1\">\n                      {Array.from({ length: 10 }).map((_, i) => (\n                        <div\n                          key={i}\n                          className={`w-2 h-2 ${i < character.stats.speed ? 'bg-blue-400' : 'bg-gray-700'}`}\n                        />\n                      ))}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex justify-between\">\n                    <span className=\"text-green-400\">JUMP:</span>\n                    <div className=\"flex space-x-1\">\n                      {Array.from({ length: 10 }).map((_, i) => (\n                        <div\n                          key={i}\n                          className={`w-2 h-2 ${i < character.stats.jump ? 'bg-green-400' : 'bg-gray-700'}`}\n                        />\n                      ))}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex justify-between\">\n                    <span className=\"text-purple-400\">SPECIAL:</span>\n                    <div className=\"flex space-x-1\">\n                      {Array.from({ length: 10 }).map((_, i) => (\n                        <div\n                          key={i}\n                          className={`w-2 h-2 ${i < character.stats.special ? 'bg-purple-400' : 'bg-gray-700'}`}\n                        />\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Character Details */}\n        {selectedCharacter && (\n          <div className=\"bg-black border-2 border-orange-400 p-6 relative\">\n            <div className=\"absolute -top-1 -left-1 w-3 h-3 bg-orange-400\"></div>\n            <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-orange-400\"></div>\n            <div className=\"absolute -bottom-1 -left-1 w-3 h-3 bg-orange-400\"></div>\n            <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-orange-400\"></div>\n            \n            <div className=\"flex justify-between items-center\">\n              <div>\n                <h2 className=\"text-2xl font-orbitron font-black text-orange-400 mb-2 tracking-wider\">\n                  {selectedCharacter.name}\n                </h2>\n                <p className=\"text-orange-300/80 font-mono\">{selectedCharacter.description}</p>\n              </div>\n              \n              <button\n                onClick={() => onCharacterSelect(selectedCharacter)}\n                className=\"bg-black border border-green-400 px-8 py-4 text-green-400 font-orbitron font-bold tracking-wider hover:bg-green-900/20 relative text-xl\"\n              >\n                <div className=\"absolute -top-1 -left-1 w-3 h-3 bg-green-400\"></div>\n                <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-400\"></div>\n                <div className=\"absolute -bottom-1 -left-1 w-3 h-3 bg-green-400\"></div>\n                <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-green-400\"></div>\n                START GAME\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":8153},"client/src/components/DegenModeToggle.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAudio } from \"@/hooks/useAudio\";\n\ninterface DegenModeToggleProps {\n  onActivateMiniGame: () => void;\n}\n\nexport default function DegenModeToggle({ onActivateMiniGame }: DegenModeToggleProps) {\n  const [isEnabled, setIsEnabled] = useState(false);\n  const [clickCount, setClickCount] = useState(0);\n  const { playClick, playHover, playNotification } = useAudio();\n\n  const handleToggle = () => {\n    playClick();\n    setIsEnabled(!isEnabled);\n  };\n\n  const handleActivateClick = () => {\n    playClick();\n    const newCount = clickCount + 1;\n    setClickCount(newCount);\n    \n    if (newCount >= 3) {\n      playNotification();\n      onActivateMiniGame();\n      setClickCount(0); // Reset counter\n    }\n  };\n\n  return (\n    <div className=\"h-full\">\n      <div className=\"flex items-center space-x-3 mb-4\">\n        <div className=\"w-12 h-12 rounded bg-gradient-to-br from-red-500 to-pink-500 p-0.5\">\n          <div className=\"w-full h-full rounded bg-black flex items-center justify-center\">\n            <span className=\"text-2xl animate-glitch\">üß®</span>\n          </div>\n        </div>\n        <div>\n          <h3 className=\"font-orbitron font-bold text-red-400\">DEGEN MODE</h3>\n          <p className=\"text-xs text-gray-400\">High Risk ‚Ä¢ Beta</p>\n        </div>\n        <div className=\"ml-auto\">\n          <label className=\"flex items-center cursor-pointer\">\n            <input\n              type=\"checkbox\"\n              checked={isEnabled}\n              onChange={handleToggle}\n              className=\"sr-only\"\n            />\n            <div className={`block w-10 h-5 rounded-full transition-colors ${\n              isEnabled ? 'bg-red-500' : 'bg-gray-600'\n            }`}>\n              <div className={`block w-4 h-4 bg-white rounded-full transition-transform transform ${\n                isEnabled ? 'translate-x-5' : 'translate-x-0.5'\n              } mt-0.5`} />\n            </div>\n          </label>\n        </div>\n      </div>\n      \n      <div className=\"space-y-3\">\n        <div className=\"bg-black/50 rounded border border-red-500/20 p-3\">\n          <div className=\"font-mono text-xs text-red-400 mb-1\">‚ö† SYSTEM STATUS</div>\n          <div className=\"text-sm font-bold\">{isEnabled ? \"CHAOS ACTIVE\" : \"STABLE MODE\"}</div>\n        </div>\n        \n        {clickCount > 0 && (\n          <div className=\"bg-black/50 rounded border border-cyber-cyan/20 p-3\">\n            <div className=\"font-mono text-xs text-cyber-cyan mb-1\">ACTIVATION SEQUENCE</div>\n            <div className=\"text-sm font-bold\">{clickCount}/3 CLICKS</div>\n          </div>\n        )}\n        \n        <Button \n          onClick={handleActivateClick}\n          className=\"w-full bg-red-500/20 border border-red-500/50 rounded px-3 py-2 text-sm font-mono hover:bg-red-500/30 transition-all text-red-400\"\n          onMouseEnter={playHover}\n        >\n          ACTIVATE NEURAL CHAOS\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3006},"client/src/components/Game3DRunner.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\ninterface Character {\n  id: string;\n  name: string;\n  image: string;\n  description: string;\n  stats: {\n    speed: number;\n    jump: number;\n    special: number;\n  };\n}\n\ninterface Game3DRunnerProps {\n  character: Character;\n  onGameEnd: (score: number) => void;\n  onBack: () => void;\n}\n\nexport function Game3DRunner({ character, onGameEnd, onBack }: Game3DRunnerProps) {\n  const mountRef = useRef<HTMLDivElement>(null);\n  const gameRef = useRef<any>(null);\n  const [score, setScore] = useState(0);\n  const [gameActive, setGameActive] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.fog = new THREE.Fog(0x001122, 30, 200);\n    \n    // Skybox/Background\n    const skyboxGeometry = new THREE.SphereGeometry(500, 32, 32);\n    const skyboxMaterial = new THREE.MeshBasicMaterial({\n      color: 0x001122,\n      side: THREE.BackSide,\n      transparent: true,\n      opacity: 0.8\n    });\n    const skybox = new THREE.Mesh(skyboxGeometry, skyboxMaterial);\n    scene.add(skybox);\n\n    const camera = new THREE.PerspectiveCamera(75, 800 / 400, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(800, 400);\n    renderer.setClearColor(0x000011);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Enhanced Lighting System\n    const ambientLight = new THREE.AmbientLight(0x223344, 0.4);\n    scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xffaa44, 1.0);\n    directionalLight.position.set(20, 20, 10);\n    directionalLight.castShadow = true;\n    directionalLight.shadow.mapSize.width = 2048;\n    directionalLight.shadow.mapSize.height = 2048;\n    directionalLight.shadow.camera.left = -50;\n    directionalLight.shadow.camera.right = 50;\n    directionalLight.shadow.camera.top = 50;\n    directionalLight.shadow.camera.bottom = -50;\n    scene.add(directionalLight);\n\n    // Add rim lighting\n    const rimLight = new THREE.DirectionalLight(0x4488ff, 0.3);\n    rimLight.position.set(-10, 5, -10);\n    scene.add(rimLight);\n\n    // Enhanced Ground System\n    const groundGeometry = new THREE.PlaneGeometry(1000, 50);\n    const groundMaterial = new THREE.MeshLambertMaterial({ \n      color: 0x112244,\n      transparent: true,\n      opacity: 0.9\n    });\n    const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n    ground.rotation.x = -Math.PI / 2;\n    ground.position.y = -2;\n    ground.receiveShadow = true;\n    scene.add(ground);\n\n    // Cyberpunk grid pattern\n    const gridHelper = new THREE.GridHelper(1000, 200, 0x00ffff, 0x003366);\n    gridHelper.position.y = -1.9;\n    gridHelper.material.transparent = true;\n    gridHelper.material.opacity = 0.3;\n    scene.add(gridHelper);\n\n    // Side walls for more enclosed feel\n    const wallGeometry = new THREE.PlaneGeometry(1000, 20);\n    const wallMaterial = new THREE.MeshLambertMaterial({ \n      color: 0x001133,\n      transparent: true,\n      opacity: 0.6\n    });\n    \n    const leftWall = new THREE.Mesh(wallGeometry, wallMaterial);\n    leftWall.position.set(0, 8, -25);\n    scene.add(leftWall);\n    \n    const rightWall = new THREE.Mesh(wallGeometry, wallMaterial);\n    rightWall.position.set(0, 8, 25);\n    scene.add(rightWall);\n\n    // Character (player) - More detailed 3D character\n    const characterGroup = new THREE.Group();\n    \n    // Body\n    const bodyGeometry = new THREE.BoxGeometry(0.8, 1.2, 0.4);\n    const bodyMaterial = new THREE.MeshLambertMaterial({ color: 0xff6600 });\n    const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\n    body.position.y = 0.6;\n    characterGroup.add(body);\n    \n    // Head\n    const headGeometry = new THREE.SphereGeometry(0.35, 8, 8);\n    const headMaterial = new THREE.MeshLambertMaterial({ color: 0xffaa44 });\n    const head = new THREE.Mesh(headGeometry, headMaterial);\n    head.position.y = 1.5;\n    characterGroup.add(head);\n    \n    // Eyes\n    const eyeGeometry = new THREE.SphereGeometry(0.05, 4, 4);\n    const eyeMaterial = new THREE.MeshLambertMaterial({ color: 0x000000 });\n    const leftEye = new THREE.Mesh(eyeGeometry, eyeMaterial);\n    leftEye.position.set(-0.15, 1.6, 0.3);\n    const rightEye = new THREE.Mesh(eyeGeometry, eyeMaterial);\n    rightEye.position.set(0.15, 1.6, 0.3);\n    characterGroup.add(leftEye);\n    characterGroup.add(rightEye);\n    \n    // Arms\n    const armGeometry = new THREE.CylinderGeometry(0.1, 0.1, 0.8);\n    const armMaterial = new THREE.MeshLambertMaterial({ color: 0xff6600 });\n    const leftArm = new THREE.Mesh(armGeometry, armMaterial);\n    leftArm.position.set(-0.5, 0.6, 0);\n    leftArm.rotation.z = 0.3;\n    const rightArm = new THREE.Mesh(armGeometry, armMaterial);\n    rightArm.position.set(0.5, 0.6, 0);\n    rightArm.rotation.z = -0.3;\n    characterGroup.add(leftArm);\n    characterGroup.add(rightArm);\n    \n    // Legs\n    const legGeometry = new THREE.CylinderGeometry(0.12, 0.12, 0.8);\n    const legMaterial = new THREE.MeshLambertMaterial({ color: 0xff4400 });\n    const leftLeg = new THREE.Mesh(legGeometry, legMaterial);\n    leftLeg.position.set(-0.2, -0.4, 0);\n    const rightLeg = new THREE.Mesh(legGeometry, legMaterial);\n    rightLeg.position.set(0.2, -0.4, 0);\n    characterGroup.add(leftLeg);\n    characterGroup.add(rightLeg);\n    \n    characterGroup.position.set(-8, 0, 0);\n    characterGroup.castShadow = true;\n    scene.add(characterGroup);\n\n    // Camera position - more cinematic angle\n    camera.position.set(-5, 6, 12);\n    camera.lookAt(characterGroup.position);\n\n    // Game state\n    const game = {\n      player: {\n        mesh: characterGroup,\n        velocityY: 0,\n        isJumping: false,\n        jumpPower: character.stats.jump * 0.3,\n        speed: character.stats.speed * 0.1,\n        runAnimation: 0\n      },\n      obstacles: [] as THREE.Mesh[],\n      coins: [] as THREE.Mesh[],\n      gameSpeed: 0.1 + (character.stats.speed * 0.02),\n      score: 0,\n      lastObstacle: 0,\n      lastCoin: 0,\n      worldOffset: 0\n    };\n\n    gameRef.current = game;\n\n    // Enhanced obstacle creation with variety\n    const createObstacle = () => {\n      const obstacleType = Math.random();\n      let obstacle: THREE.Mesh;\n      \n      if (obstacleType < 0.33) {\n        // Spiky obstacle\n        const obstacleGeometry = new THREE.ConeGeometry(0.5, 2, 6);\n        const obstacleMaterial = new THREE.MeshLambertMaterial({ \n          color: 0xff2244,\n          transparent: true,\n          opacity: 0.9\n        });\n        obstacle = new THREE.Mesh(obstacleGeometry, obstacleMaterial);\n        obstacle.position.set(20, 1, Math.random() * 6 - 3);\n      } else if (obstacleType < 0.66) {\n        // Block obstacle\n        const obstacleGeometry = new THREE.BoxGeometry(1, 2, 1);\n        const obstacleMaterial = new THREE.MeshLambertMaterial({ \n          color: 0xff4400,\n          transparent: true,\n          opacity: 0.8\n        });\n        obstacle = new THREE.Mesh(obstacleGeometry, obstacleMaterial);\n        obstacle.position.set(20, 0, Math.random() * 6 - 3);\n      } else {\n        // Crystal obstacle\n        const obstacleGeometry = new THREE.OctahedronGeometry(1);\n        const obstacleMaterial = new THREE.MeshLambertMaterial({ \n          color: 0xff0066,\n          transparent: true,\n          opacity: 0.7\n        });\n        obstacle = new THREE.Mesh(obstacleGeometry, obstacleMaterial);\n        obstacle.position.set(20, 1.5, Math.random() * 6 - 3);\n      }\n      \n      obstacle.castShadow = true;\n      obstacle.receiveShadow = true;\n      scene.add(obstacle);\n      game.obstacles.push(obstacle);\n    };\n\n    // Enhanced coin creation with glow effect\n    const createCoin = () => {\n      const coinGroup = new THREE.Group();\n      \n      // Main coin\n      const coinGeometry = new THREE.CylinderGeometry(0.4, 0.4, 0.1, 8);\n      const coinMaterial = new THREE.MeshLambertMaterial({ \n        color: 0xffdd00,\n        transparent: true,\n        opacity: 0.9\n      });\n      const coin = new THREE.Mesh(coinGeometry, coinMaterial);\n      coinGroup.add(coin);\n      \n      // Glow ring\n      const glowGeometry = new THREE.RingGeometry(0.45, 0.65, 16);\n      const glowMaterial = new THREE.MeshBasicMaterial({ \n        color: 0xffff44,\n        transparent: true,\n        opacity: 0.3,\n        side: THREE.DoubleSide\n      });\n      const glow = new THREE.Mesh(glowGeometry, glowMaterial);\n      glow.rotation.x = -Math.PI / 2;\n      coinGroup.add(glow);\n      \n      coinGroup.position.set(20, Math.random() * 4 + 2, Math.random() * 8 - 4);\n      coinGroup.castShadow = true;\n      scene.add(coinGroup);\n      game.coins.push(coinGroup);\n    };\n\n    // Game loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      if (!gameActive || gameOver) {\n        renderer.render(scene, camera);\n        return;\n      }\n\n      // Player physics and animation\n      if (game.player.isJumping) {\n        game.player.mesh.position.y += game.player.velocityY;\n        game.player.velocityY -= 0.02; // gravity\n        \n        if (game.player.mesh.position.y <= 0) {\n          game.player.mesh.position.y = 0;\n          game.player.isJumping = false;\n          game.player.velocityY = 0;\n        }\n      }\n      \n      // Running animation\n      game.player.runAnimation += 0.2;\n      if (game.player.mesh.children.length > 4) { // If we have arms and legs\n        const leftArm = game.player.mesh.children[3];\n        const rightArm = game.player.mesh.children[4];\n        const leftLeg = game.player.mesh.children[5];\n        const rightLeg = game.player.mesh.children[6];\n        \n        leftArm.rotation.x = Math.sin(game.player.runAnimation) * 0.5;\n        rightArm.rotation.x = Math.sin(game.player.runAnimation + Math.PI) * 0.5;\n        leftLeg.rotation.x = Math.sin(game.player.runAnimation + Math.PI) * 0.3;\n        rightLeg.rotation.x = Math.sin(game.player.runAnimation) * 0.3;\n      }\n\n      // Spawn obstacles\n      if (Date.now() - game.lastObstacle > 2000) {\n        createObstacle();\n        game.lastObstacle = Date.now();\n      }\n\n      // Spawn coins\n      if (Date.now() - game.lastCoin > 1500) {\n        createCoin();\n        game.lastCoin = Date.now();\n      }\n\n      // Update obstacles\n      game.obstacles.forEach((obstacle, index) => {\n        obstacle.position.x -= game.gameSpeed;\n        obstacle.rotation.y += 0.02;\n\n        // Collision detection\n        const distance = game.player.mesh.position.distanceTo(obstacle.position);\n        if (distance < 1.2) {\n          setGameOver(true);\n          onGameEnd(game.score);\n        }\n\n        // Remove off-screen obstacles\n        if (obstacle.position.x < -30) {\n          scene.remove(obstacle);\n          game.obstacles.splice(index, 1);\n        }\n      });\n\n      // Update coins\n      game.coins.forEach((coin, index) => {\n        coin.position.x -= game.gameSpeed;\n        coin.rotation.y += 0.1;\n\n        // Collision detection\n        const distance = game.player.mesh.position.distanceTo(coin.position);\n        if (distance < 1) {\n          scene.remove(coin);\n          game.coins.splice(index, 1);\n          game.score += 10;\n          setScore(game.score);\n        }\n\n        // Remove off-screen coins\n        if (coin.position.x < -30) {\n          scene.remove(coin);\n          game.coins.splice(index, 1);\n        }\n      });\n\n      // Dynamic camera movement for immersive experience\n      game.worldOffset += game.gameSpeed;\n      \n      // Smooth camera following with slight lag for cinematic effect\n      camera.position.x += (game.player.mesh.position.x + 3 - camera.position.x) * 0.1;\n      camera.position.y += (game.player.mesh.position.y + 6 - camera.position.y) * 0.05;\n      \n      // Dynamic camera angle based on player height\n      const targetY = game.player.mesh.position.y > 2 ? 8 : 6;\n      camera.position.y += (targetY - camera.position.y) * 0.02;\n      \n      // Look slightly ahead of the player\n      camera.lookAt(\n        game.player.mesh.position.x + 2, \n        game.player.mesh.position.y + 1, \n        game.player.mesh.position.z\n      );\n\n      // Gradually increase game speed and difficulty\n      game.gameSpeed += 0.0002;\n\n      renderer.render(scene, camera);\n    };\n\n    // Controls\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if ((e.code === 'Space' || e.code === 'ArrowUp') && !game.player.isJumping) {\n        game.player.isJumping = true;\n        game.player.velocityY = game.player.jumpPower;\n      }\n    };\n\n    const handleClick = () => {\n      if (!game.player.isJumping) {\n        game.player.isJumping = true;\n        game.player.velocityY = game.player.jumpPower;\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    renderer.domElement.addEventListener('click', handleClick);\n\n    setIsLoading(false);\n    animate();\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n      renderer.domElement.removeEventListener('click', handleClick);\n      if (mountRef.current && renderer.domElement) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n    };\n  }, [character, gameActive, gameOver, onGameEnd]);\n\n  const startGame = () => {\n    setGameActive(true);\n    setScore(0);\n    setGameOver(false);\n    if (gameRef.current) {\n      gameRef.current.score = 0;\n      gameRef.current.obstacles = [];\n      gameRef.current.coins = [];\n      gameRef.current.player.mesh.position.y = 0;\n      gameRef.current.player.isJumping = false;\n      gameRef.current.gameSpeed = 0.1 + (character.stats.speed * 0.02);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black flex flex-col\">\n      {/* Game Header */}\n      <div className=\"h-20 bg-black border-b-2 border-orange-400 relative flex items-center justify-between px-8\">\n        <div className=\"absolute top-0 left-0 w-6 h-6 border-t-2 border-l-2 border-orange-400\"></div>\n        <div className=\"absolute top-0 right-0 w-6 h-6 border-t-2 border-r-2 border-orange-400\"></div>\n        \n        <button\n          onClick={onBack}\n          className=\"bg-black border border-red-400 px-6 py-2 text-red-400 font-orbitron font-bold tracking-wider hover:bg-red-900/20 relative\"\n        >\n          <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-red-400\"></div>\n          <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-red-400\"></div>\n          EXIT\n        </button>\n\n        <div className=\"flex items-center space-x-8\">\n          <div className=\"bg-black border border-orange-400 px-4 py-2 relative\">\n            <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-orange-400\"></div>\n            <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-orange-400\"></div>\n            <span className=\"font-orbitron text-orange-400 font-bold tracking-wider\">\n              PLAYER: {character.name}\n            </span>\n          </div>\n          \n          <div className=\"bg-black border border-green-400 px-4 py-2 relative\">\n            <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-green-400\"></div>\n            <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-green-400\"></div>\n            <span className=\"font-orbitron text-green-400 font-bold tracking-wider\">\n              SCORE: {score}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"w-24\"></div>\n      </div>\n\n      {/* Game Area */}\n      <div className=\"flex-1 flex items-center justify-center bg-gradient-to-b from-gray-900 to-black\">\n        {isLoading ? (\n          <div className=\"text-center\">\n            <div className=\"bg-black border border-orange-400 p-8 relative\">\n              <div className=\"absolute -top-1 -left-1 w-3 h-3 bg-orange-400\"></div>\n              <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-orange-400\"></div>\n              <h2 className=\"text-xl font-orbitron font-black text-orange-400 mb-4 tracking-wider\">\n                LOADING 3D ENGINE...\n              </h2>\n              <div className=\"w-4 h-4 border border-orange-400 border-t-transparent animate-spin mx-auto\"></div>\n            </div>\n          </div>\n        ) : !gameActive ? (\n          <div className=\"text-center\">\n            <div className=\"bg-black border-2 border-orange-400 p-8 relative\">\n              <div className=\"absolute -top-1 -left-1 w-3 h-3 bg-orange-400\"></div>\n              <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-orange-400\"></div>\n              <div className=\"absolute -bottom-1 -left-1 w-3 h-3 bg-orange-400\"></div>\n              <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-orange-400\"></div>\n              \n              <h2 className=\"text-3xl font-orbitron font-black text-orange-400 mb-4 tracking-wider\">\n                3D LEMMI RUN\n              </h2>\n              <p className=\"text-orange-300/80 font-mono mb-6\">\n                Press SPACE or CLICK to jump over obstacles and collect coins!<br/>\n                <span className=\"text-sm text-orange-400\">Immersive 3D Experience</span>\n              </p>\n              \n              <button\n                onClick={startGame}\n                className=\"bg-black border border-green-400 px-8 py-4 text-green-400 font-orbitron font-bold tracking-wider hover:bg-green-900/20 relative\"\n              >\n                <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-green-400\"></div>\n                <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-green-400\"></div>\n                <div className=\"absolute -bottom-1 -left-1 w-2 h-2 bg-green-400\"></div>\n                <div className=\"absolute -bottom-1 -right-1 w-2 h-2 bg-green-400\"></div>\n                START 3D GAME\n              </button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"bg-black border-2 border-orange-400 relative\">\n            <div className=\"absolute -top-1 -left-1 w-3 h-3 bg-orange-400\"></div>\n            <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-orange-400\"></div>\n            <div className=\"absolute -bottom-1 -left-1 w-3 h-3 bg-orange-400\"></div>\n            <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-orange-400\"></div>\n            \n            <div ref={mountRef} className=\"w-[800px] h-[400px]\" />\n          </div>\n        )}\n      </div>\n\n      {/* Game Over Screen */}\n      {gameOver && (\n        <div className=\"absolute inset-0 bg-black/80 flex items-center justify-center\">\n          <div className=\"bg-black border-2 border-red-400 p-8 relative text-center\">\n            <div className=\"absolute -top-1 -left-1 w-3 h-3 bg-red-400\"></div>\n            <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-400\"></div>\n            <div className=\"absolute -bottom-1 -left-1 w-3 h-3 bg-red-400\"></div>\n            <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-red-400\"></div>\n            \n            <h2 className=\"text-4xl font-orbitron font-black text-red-400 mb-4 tracking-wider\">\n              GAME OVER\n            </h2>\n            <p className=\"text-2xl font-mono text-orange-400 mb-6\">\n              FINAL SCORE: {score}\n            </p>\n            \n            <div className=\"flex space-x-4\">\n              <button\n                onClick={startGame}\n                className=\"bg-black border border-green-400 px-6 py-3 text-green-400 font-orbitron font-bold tracking-wider hover:bg-green-900/20 relative\"\n              >\n                <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-green-400\"></div>\n                <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-green-400\"></div>\n                PLAY AGAIN\n              </button>\n              \n              <button\n                onClick={onBack}\n                className=\"bg-black border border-red-400 px-6 py-3 text-red-400 font-orbitron font-bold tracking-wider hover:bg-red-900/20 relative\"\n              >\n                <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-red-400\"></div>\n                <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-red-400\"></div>\n                EXIT\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":20302},"client/src/components/GameRunner.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\n\ninterface Character {\n  id: string;\n  name: string;\n  image: string;\n  stats: {\n    speed: number;\n    jump: number;\n    special: number;\n  };\n}\n\ninterface GameRunnerProps {\n  character: Character;\n  onGameEnd: (score: number) => void;\n  onBack: () => void;\n}\n\nexport function GameRunner({ character, onGameEnd, onBack }: GameRunnerProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const gameRef = useRef<any>(null);\n  const [score, setScore] = useState(0);\n  const [gameActive, setGameActive] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Game state\n    const game = {\n      player: {\n        x: 100,\n        y: 300,\n        width: 40,\n        height: 40,\n        velocityY: 0,\n        isJumping: false,\n        groundY: 300,\n        jumpPower: character.stats.jump * 2,\n        speed: character.stats.speed\n      },\n      obstacles: [] as Array<{ x: number; y: number; width: number; height: number }>,\n      coins: [] as Array<{ x: number; y: number; width: number; height: number; collected: boolean }>,\n      gameSpeed: 2 + (character.stats.speed / 2),\n      score: 0,\n      lastObstacle: 0,\n      lastCoin: 0\n    };\n\n    gameRef.current = game;\n\n    // Load character image\n    const characterImage = new Image();\n    characterImage.src = character.image;\n\n    // Game loop\n    const gameLoop = () => {\n      if (!gameActive || gameOver) return;\n\n      // Clear canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Draw background (simple parallax)\n      ctx.fillStyle = '#1a1a1a';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      \n      // Ground\n      ctx.fillStyle = '#333333';\n      ctx.fillRect(0, canvas.height - 50, canvas.width, 50);\n\n      // Update player physics\n      if (game.player.isJumping) {\n        game.player.y -= game.player.velocityY;\n        game.player.velocityY -= 0.8; // gravity\n        \n        if (game.player.y >= game.player.groundY) {\n          game.player.y = game.player.groundY;\n          game.player.isJumping = false;\n          game.player.velocityY = 0;\n        }\n      }\n\n      // Draw player\n      if (characterImage.complete) {\n        ctx.drawImage(characterImage, game.player.x, game.player.y, game.player.width, game.player.height);\n      } else {\n        ctx.fillStyle = '#ff6600';\n        ctx.fillRect(game.player.x, game.player.y, game.player.width, game.player.height);\n      }\n\n      // Spawn obstacles\n      if (Date.now() - game.lastObstacle > 2000) {\n        game.obstacles.push({\n          x: canvas.width,\n          y: 320,\n          width: 30,\n          height: 60\n        });\n        game.lastObstacle = Date.now();\n      }\n\n      // Spawn coins\n      if (Date.now() - game.lastCoin > 1500) {\n        game.coins.push({\n          x: canvas.width,\n          y: Math.random() > 0.5 ? 250 : 200,\n          width: 20,\n          height: 20,\n          collected: false\n        });\n        game.lastCoin = Date.now();\n      }\n\n      // Update and draw obstacles\n      game.obstacles = game.obstacles.filter(obstacle => {\n        obstacle.x -= game.gameSpeed;\n        \n        ctx.fillStyle = '#ff0000';\n        ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);\n\n        // Collision detection\n        if (obstacle.x < game.player.x + game.player.width &&\n            obstacle.x + obstacle.width > game.player.x &&\n            obstacle.y < game.player.y + game.player.height &&\n            obstacle.y + obstacle.height > game.player.y) {\n          setGameOver(true);\n          onGameEnd(game.score);\n          return false;\n        }\n\n        return obstacle.x > -obstacle.width;\n      });\n\n      // Update and draw coins\n      game.coins = game.coins.filter(coin => {\n        coin.x -= game.gameSpeed;\n        \n        if (!coin.collected) {\n          ctx.fillStyle = '#ffff00';\n          ctx.fillRect(coin.x, coin.y, coin.width, coin.height);\n\n          // Collision detection\n          if (coin.x < game.player.x + game.player.width &&\n              coin.x + coin.width > game.player.x &&\n              coin.y < game.player.y + game.player.height &&\n              coin.y + coin.height > game.player.y) {\n            coin.collected = true;\n            game.score += 10;\n            setScore(game.score);\n          }\n        }\n\n        return coin.x > -coin.width;\n      });\n\n      // Increase game speed gradually\n      game.gameSpeed += 0.001;\n\n      requestAnimationFrame(gameLoop);\n    };\n\n    // Controls\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if ((e.code === 'Space' || e.code === 'ArrowUp') && !game.player.isJumping) {\n        game.player.isJumping = true;\n        game.player.velocityY = game.player.jumpPower;\n      }\n    };\n\n    const handleClick = () => {\n      if (!game.player.isJumping) {\n        game.player.isJumping = true;\n        game.player.velocityY = game.player.jumpPower;\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    canvas.addEventListener('click', handleClick);\n\n    if (gameActive) {\n      gameLoop();\n    }\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n      canvas.removeEventListener('click', handleClick);\n    };\n  }, [character, gameActive, gameOver, onGameEnd]);\n\n  const startGame = () => {\n    setGameActive(true);\n    setScore(0);\n    setGameOver(false);\n    if (gameRef.current) {\n      gameRef.current.score = 0;\n      gameRef.current.obstacles = [];\n      gameRef.current.coins = [];\n      gameRef.current.player.y = gameRef.current.player.groundY;\n      gameRef.current.player.isJumping = false;\n      gameRef.current.gameSpeed = 2 + (character.stats.speed / 2);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black flex flex-col\">\n      {/* Game Header */}\n      <div className=\"h-20 bg-black border-b-2 border-orange-400 relative flex items-center justify-between px-8\">\n        <div className=\"absolute top-0 left-0 w-6 h-6 border-t-2 border-l-2 border-orange-400\"></div>\n        <div className=\"absolute top-0 right-0 w-6 h-6 border-t-2 border-r-2 border-orange-400\"></div>\n        \n        <button\n          onClick={onBack}\n          className=\"bg-black border border-red-400 px-6 py-2 text-red-400 font-orbitron font-bold tracking-wider hover:bg-red-900/20 relative\"\n        >\n          <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-red-400\"></div>\n          <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-red-400\"></div>\n          EXIT\n        </button>\n\n        <div className=\"flex items-center space-x-8\">\n          <div className=\"bg-black border border-orange-400 px-4 py-2 relative\">\n            <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-orange-400\"></div>\n            <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-orange-400\"></div>\n            <span className=\"font-orbitron text-orange-400 font-bold tracking-wider\">\n              PLAYER: {character.name}\n            </span>\n          </div>\n          \n          <div className=\"bg-black border border-green-400 px-4 py-2 relative\">\n            <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-green-400\"></div>\n            <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-green-400\"></div>\n            <span className=\"font-orbitron text-green-400 font-bold tracking-wider\">\n              SCORE: {score}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"w-24\"></div>\n      </div>\n\n      {/* Game Area */}\n      <div className=\"flex-1 flex items-center justify-center bg-gradient-to-b from-gray-900 to-black\">\n        {!gameActive ? (\n          <div className=\"text-center\">\n            <div className=\"bg-black border-2 border-orange-400 p-8 relative\">\n              <div className=\"absolute -top-1 -left-1 w-3 h-3 bg-orange-400\"></div>\n              <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-orange-400\"></div>\n              <div className=\"absolute -bottom-1 -left-1 w-3 h-3 bg-orange-400\"></div>\n              <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-orange-400\"></div>\n              \n              <h2 className=\"text-3xl font-orbitron font-black text-orange-400 mb-4 tracking-wider\">\n                LEMMI RUN\n              </h2>\n              <p className=\"text-orange-300/80 font-mono mb-6\">\n                Press SPACE or CLICK to jump over obstacles and collect coins!\n              </p>\n              \n              <button\n                onClick={startGame}\n                className=\"bg-black border border-green-400 px-8 py-4 text-green-400 font-orbitron font-bold tracking-wider hover:bg-green-900/20 relative\"\n              >\n                <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-green-400\"></div>\n                <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-green-400\"></div>\n                <div className=\"absolute -bottom-1 -left-1 w-2 h-2 bg-green-400\"></div>\n                <div className=\"absolute -bottom-1 -right-1 w-2 h-2 bg-green-400\"></div>\n                START GAME\n              </button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"bg-black border-2 border-orange-400 relative\">\n            <div className=\"absolute -top-1 -left-1 w-3 h-3 bg-orange-400\"></div>\n            <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-orange-400\"></div>\n            <div className=\"absolute -bottom-1 -left-1 w-3 h-3 bg-orange-400\"></div>\n            <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-orange-400\"></div>\n            \n            <canvas\n              ref={canvasRef}\n              width={800}\n              height={400}\n              className=\"block\"\n            />\n          </div>\n        )}\n      </div>\n\n      {/* Game Over Screen */}\n      {gameOver && (\n        <div className=\"absolute inset-0 bg-black/80 flex items-center justify-center\">\n          <div className=\"bg-black border-2 border-red-400 p-8 relative text-center\">\n            <div className=\"absolute -top-1 -left-1 w-3 h-3 bg-red-400\"></div>\n            <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-400\"></div>\n            <div className=\"absolute -bottom-1 -left-1 w-3 h-3 bg-red-400\"></div>\n            <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-red-400\"></div>\n            \n            <h2 className=\"text-4xl font-orbitron font-black text-red-400 mb-4 tracking-wider\">\n              GAME OVER\n            </h2>\n            <p className=\"text-2xl font-mono text-orange-400 mb-6\">\n              FINAL SCORE: {score}\n            </p>\n            \n            <div className=\"flex space-x-4\">\n              <button\n                onClick={startGame}\n                className=\"bg-black border border-green-400 px-6 py-3 text-green-400 font-orbitron font-bold tracking-wider hover:bg-green-900/20 relative\"\n              >\n                <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-green-400\"></div>\n                <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-green-400\"></div>\n                PLAY AGAIN\n              </button>\n              \n              <button\n                onClick={onBack}\n                className=\"bg-black border border-red-400 px-6 py-3 text-red-400 font-orbitron font-bold tracking-wider hover:bg-red-900/20 relative\"\n              >\n                <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-red-400\"></div>\n                <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-red-400\"></div>\n                EXIT\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":11704},"client/src/components/GerbilNftGallery.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport jeffImage from \"@assets/jeff_1754579357023.webp\";\nimport ashinaImage from \"@assets/ashina_1754579357036.webp\";\nimport undeadImage from \"@assets/undead_1754579357037.webp\";\nimport grimReaperImage from \"@assets/grim reaper_1754579357037.webp\";\nimport cowboyImage from \"@assets/cowboy_1754579357037.webp\";\nimport bomoImage from \"@assets/bomo_1754579357038.webp\";\nimport icoImage from \"@assets/ico_1754579357038.webp\";\nimport mumrikImage from \"@assets/mumrik_1754579357038.webp\";\nimport snowImage from \"@assets/snow_1754579357039.webp\";\n\ninterface GerbilNft {\n  id: string;\n  name: string;\n  image: string;\n  rarity: 'Common' | 'Uncommon' | 'Rare' | 'Epic' | 'Legendary';\n  attributes: string[];\n  cardanoScanUrl?: string;\n}\n\nconst GERBIL_NFTS: GerbilNft[] = [\n  {\n    id: \"jeff\",\n    name: \"Jeff - Laser Eyes\",\n    image: jeffImage,\n    rarity: \"Legendary\",\n    attributes: [\"Laser Eyes\", \"Mischievous\", \"Power Level 9000\"],\n    cardanoScanUrl: \"https://cardanoscan.io/token/jeff123\"\n  },\n  {\n    id: \"ashina\",\n    name: \"Ashina - Samurai Warrior\",\n    image: ashinaImage,\n    rarity: \"Epic\",\n    attributes: [\"Samurai\", \"Golden Armor\", \"Honor Badge\"],\n    cardanoScanUrl: \"https://cardanoscan.io/token/ashina456\"\n  },\n  {\n    id: \"undead\",\n    name: \"Undead - Zombie Gerbil\",\n    image: undeadImage,\n    rarity: \"Rare\",\n    attributes: [\"Zombie\", \"Exposed Brain\", \"Creepy\"],\n    cardanoScanUrl: \"https://cardanoscan.io/token/undead789\"\n  },\n  {\n    id: \"grimreaper\",\n    name: \"Grim Reaper\",\n    image: grimReaperImage,\n    rarity: \"Epic\",\n    attributes: [\"Death\", \"Scythe\", \"Dark Powers\"],\n    cardanoScanUrl: \"https://cardanoscan.io/token/grim101\"\n  },\n  {\n    id: \"cowboy\",\n    name: \"Cowboy - Wild West\",\n    image: cowboyImage,\n    rarity: \"Uncommon\",\n    attributes: [\"Cowboy Hat\", \"Gunslinger\", \"Desert Wanderer\"],\n    cardanoScanUrl: \"https://cardanoscan.io/token/cowboy202\"\n  },\n  {\n    id: \"bomo\",\n    name: \"Bomo - Gentleman\",\n    image: bomoImage,\n    rarity: \"Rare\",\n    attributes: [\"Gentleman\", \"Top Hat\", \"Sophisticated\"],\n    cardanoScanUrl: \"https://cardanoscan.io/token/bomo303\"\n  },\n  {\n    id: \"ico\",\n    name: \"Ico - Viking Warrior\",\n    image: icoImage,\n    rarity: \"Epic\",\n    attributes: [\"Viking\", \"Horned Helmet\", \"Battle Ready\"],\n    cardanoScanUrl: \"https://cardanoscan.io/token/ico404\"\n  },\n  {\n    id: \"mumrik\",\n    name: \"Mumrik - Forest Ranger\",\n    image: mumrikImage,\n    rarity: \"Common\",\n    attributes: [\"Forest\", \"Nature Lover\", \"Green Cloak\"],\n    cardanoScanUrl: \"https://cardanoscan.io/token/mumrik505\"\n  },\n  {\n    id: \"snow\",\n    name: \"Snow - Winter Survivor\",\n    image: snowImage,\n    rarity: \"Rare\",\n    attributes: [\"Winter\", \"Cold Resistant\", \"Furry Companion\"],\n    cardanoScanUrl: \"https://cardanoscan.io/token/snow606\"\n  }\n];\n\nconst getRarityColor = (rarity: string) => {\n  switch (rarity) {\n    case 'Common': return 'text-gray-400 border-gray-400';\n    case 'Uncommon': return 'text-green-400 border-green-400';\n    case 'Rare': return 'text-blue-400 border-blue-400';\n    case 'Epic': return 'text-purple-400 border-purple-400';\n    case 'Legendary': return 'text-orange-400 border-orange-400';\n    default: return 'text-gray-400 border-gray-400';\n  }\n};\n\ninterface GerbilNftGalleryProps {\n  walletAddress: string | null;\n  onNftSelect?: (nft: GerbilNft) => void;\n}\n\nexport default function GerbilNftGallery({ walletAddress, onNftSelect }: GerbilNftGalleryProps) {\n  const [selectedNft, setSelectedNft] = useState<GerbilNft | null>(null);\n\n  const handleNftClick = (nft: GerbilNft) => {\n    setSelectedNft(nft);\n    onNftSelect?.(nft);\n  };\n\n  const handleCardanoScan = (nft: GerbilNft) => {\n    if (nft.cardanoScanUrl) {\n      window.open(nft.cardanoScanUrl, '_blank');\n    }\n  };\n\n  if (!walletAddress) {\n    return (\n      <div className=\"text-center p-6\">\n        <div className=\"text-6xl mb-4\">üîí</div>\n        <p className=\"text-gray-400 font-mono\">Connect Lace Wallet to view your Gerbil NFTs</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"mb-6 text-center\">\n        <h2 className=\"text-2xl font-orbitron font-bold text-orange-400 mb-2\">\n          üêπ GERBIL NFT COLLECTION\n        </h2>\n        <p className=\"text-sm text-gray-400 font-mono\">\n          {GERBIL_NFTS.length} Unique Gerbils ‚Ä¢ Cardano Blockchain\n        </p>\n      </div>\n\n      {/* NFT Grid */}\n      <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 mb-6\">\n        {GERBIL_NFTS.map((nft) => (\n          <div \n            key={nft.id}\n            className={`group relative bg-black/60 rounded-lg border-2 p-3 cursor-pointer transition-all duration-300 hover:scale-105 hover:shadow-lg ${\n              selectedNft?.id === nft.id \n                ? `${getRarityColor(nft.rarity)} shadow-lg` \n                : 'border-gray-600 hover:border-orange-400/50'\n            }`}\n            onClick={() => handleNftClick(nft)}\n          >\n            {/* NFT Image */}\n            <div className=\"relative aspect-square mb-3 rounded overflow-hidden\">\n              <img \n                src={nft.image} \n                alt={nft.name}\n                className=\"w-full h-full object-cover transition-transform group-hover:scale-110\"\n              />\n              <div className=\"absolute top-2 right-2\">\n                <span className={`px-2 py-1 text-xs font-mono rounded border ${getRarityColor(nft.rarity)} bg-black/80`}>\n                  {nft.rarity}\n                </span>\n              </div>\n            </div>\n            \n            {/* NFT Info */}\n            <h3 className=\"text-sm font-orbitron font-bold text-orange-300 mb-2\">\n              {nft.name}\n            </h3>\n            \n            {/* Attributes */}\n            <div className=\"flex flex-wrap gap-1 mb-2\">\n              {nft.attributes.slice(0, 2).map((attr, index) => (\n                <span \n                  key={index}\n                  className=\"px-2 py-1 text-xs bg-gray-800/60 text-gray-300 rounded\"\n                >\n                  {attr}\n                </span>\n              ))}\n            </div>\n\n            {/* Cardano Scan Button */}\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              className=\"w-full text-xs border-orange-500/50 text-orange-400 hover:bg-orange-500/10\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleCardanoScan(nft);\n              }}\n            >\n              üìä VIEW ON CARDANOSCAN\n            </Button>\n          </div>\n        ))}\n      </div>\n\n      {/* Selected NFT Details */}\n      {selectedNft && (\n        <div className=\"bg-black/80 rounded-lg border-2 border-orange-500/50 p-6\">\n          <h3 className=\"text-xl font-orbitron font-bold text-orange-400 mb-4\">\n            Selected: {selectedNft.name}\n          </h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <img \n                src={selectedNft.image} \n                alt={selectedNft.name}\n                className=\"w-full rounded-lg\"\n              />\n            </div>\n            \n            <div>\n              <div className=\"space-y-4\">\n                <div>\n                  <span className=\"text-gray-400 font-mono text-sm\">Rarity:</span>\n                  <span className={`ml-2 px-3 py-1 rounded border font-mono ${getRarityColor(selectedNft.rarity)}`}>\n                    {selectedNft.rarity}\n                  </span>\n                </div>\n                \n                <div>\n                  <span className=\"text-gray-400 font-mono text-sm block mb-2\">Attributes:</span>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {selectedNft.attributes.map((attr, index) => (\n                      <span \n                        key={index}\n                        className=\"px-3 py-1 bg-gray-800/60 text-gray-300 rounded font-mono text-sm\"\n                      >\n                        {attr}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n\n                <Button\n                  className=\"w-full bg-orange-500/20 border border-orange-500 text-orange-400 hover:bg-orange-500/30\"\n                  onClick={() => handleCardanoScan(selectedNft)}\n                >\n                  üîó VIEW TRANSACTION ON CARDANO\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8543},"client/src/components/HDCharacterAnimation.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport AshinaTexture from '@assets/ashina_1754580592322.webp';\n\ninterface HDCharacterAnimationProps {\n  variant: 'loading' | 'menu';\n  onAnimationComplete?: () => void;\n}\n\nexport function HDCharacterAnimation({ variant, onAnimationComplete }: HDCharacterAnimationProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationRef = useRef<number>();\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [animationFrame, setAnimationFrame] = useState(0);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set high DPI for HD rendering\n    const dpr = window.devicePixelRatio || 1;\n    const rect = canvas.getBoundingClientRect();\n    canvas.width = rect.width * dpr;\n    canvas.height = rect.height * dpr;\n    ctx.scale(dpr, dpr);\n    canvas.style.width = rect.width + 'px';\n    canvas.style.height = rect.height + 'px';\n\n    const img = new Image();\n    img.crossOrigin = 'anonymous';\n    \n    img.onload = () => {\n      setIsLoaded(true);\n      startAnimation();\n    };\n\n    img.src = AshinaTexture;\n\n    const startAnimation = () => {\n      let frame = 0;\n      const maxFrames = variant === 'loading' ? 180 : 120; // 3 seconds at 60fps for loading, 2 seconds for menu\n      \n      const animate = () => {\n        if (!ctx || !canvas) return;\n\n        ctx.clearRect(0, 0, rect.width, rect.height);\n        \n        if (variant === 'loading') {\n          // Loading animation - Character materializing with glitch effects\n          renderLoadingAnimation(ctx, img, frame, rect.width, rect.height);\n        } else {\n          // Menu animation - Character idle with breathing and particle effects\n          renderMenuAnimation(ctx, img, frame, rect.width, rect.height);\n        }\n\n        frame++;\n        setAnimationFrame(frame);\n        \n        if (frame < maxFrames) {\n          animationRef.current = requestAnimationFrame(animate);\n        } else {\n          if (variant === 'loading') {\n            onAnimationComplete?.();\n          }\n          // Menu animation loops\n          if (variant === 'menu') {\n            frame = 0;\n            animationRef.current = requestAnimationFrame(animate);\n          }\n        }\n      };\n\n      animationRef.current = requestAnimationFrame(animate);\n    };\n\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [variant, onAnimationComplete]);\n\n  const renderLoadingAnimation = (\n    ctx: CanvasRenderingContext2D, \n    img: HTMLImageElement, \n    frame: number, \n    width: number, \n    height: number\n  ) => {\n    const progress = frame / 180;\n    const centerX = width / 2;\n    const centerY = height / 2;\n\n    // Character materialization effect\n    ctx.save();\n    \n    // Glitch effect - random displacement\n    if (progress < 0.7) {\n      const glitchIntensity = (0.7 - progress) * 20;\n      const offsetX = (Math.random() - 0.5) * glitchIntensity;\n      const offsetY = (Math.random() - 0.5) * glitchIntensity;\n      ctx.translate(offsetX, offsetY);\n    }\n\n    // Character scale animation\n    const scale = Math.min(1, progress * 1.2);\n    ctx.translate(centerX, centerY);\n    ctx.scale(scale, scale);\n\n    // Character opacity with pixelation effect\n    const alpha = Math.min(1, progress * 1.5);\n    ctx.globalAlpha = alpha;\n\n    // Draw character with pixelation during materialization\n    if (progress < 0.5) {\n      // Pixelated appearance during materialization\n      ctx.imageSmoothingEnabled = false;\n      const pixelSize = Math.max(1, (0.5 - progress) * 8);\n      ctx.scale(pixelSize, pixelSize);\n      ctx.drawImage(img, -img.width/(2*pixelSize), -img.height/(2*pixelSize), img.width/pixelSize, img.height/pixelSize);\n    } else {\n      // Smooth high-resolution character\n      ctx.imageSmoothingEnabled = true;\n      ctx.imageSmoothingQuality = 'high';\n      const charWidth = 200;\n      const charHeight = (img.height / img.width) * charWidth;\n      ctx.drawImage(img, -charWidth/2, -charHeight/2, charWidth, charHeight);\n    }\n\n    ctx.restore();\n\n    // Neural scan lines effect\n    if (progress < 0.8) {\n      ctx.strokeStyle = `rgba(0, 255, 255, ${0.8 - progress})`;\n      ctx.lineWidth = 2;\n      for (let i = 0; i < 5; i++) {\n        const y = (frame * 3 + i * 40) % height;\n        ctx.beginPath();\n        ctx.moveTo(0, y);\n        ctx.lineTo(width, y);\n        ctx.stroke();\n      }\n    }\n\n    // Particle effects\n    for (let i = 0; i < 20; i++) {\n      const particleX = centerX + Math.cos(frame * 0.1 + i) * (50 + i * 5);\n      const particleY = centerY + Math.sin(frame * 0.1 + i) * (50 + i * 5);\n      const particleAlpha = Math.max(0, progress - 0.3) * (1 - i / 20);\n      \n      ctx.fillStyle = `rgba(0, 255, 255, ${particleAlpha})`;\n      ctx.fillRect(particleX, particleY, 2, 2);\n    }\n  };\n\n  const renderMenuAnimation = (\n    ctx: CanvasRenderingContext2D, \n    img: HTMLImageElement, \n    frame: number, \n    width: number, \n    height: number\n  ) => {\n    const centerX = width / 2;\n    const centerY = height / 2;\n\n    ctx.save();\n    ctx.translate(centerX, centerY);\n\n    // Breathing animation\n    const breathScale = 1 + Math.sin(frame * 0.05) * 0.02;\n    ctx.scale(breathScale, breathScale);\n\n    // Subtle floating animation\n    const floatY = Math.sin(frame * 0.03) * 3;\n    ctx.translate(0, floatY);\n\n    // High-resolution character rendering\n    ctx.imageSmoothingEnabled = true;\n    ctx.imageSmoothingQuality = 'high';\n    \n    const charWidth = 180;\n    const charHeight = (img.height / img.width) * charWidth;\n    \n    // Add subtle glow effect\n    ctx.shadowColor = 'rgba(0, 255, 255, 0.3)';\n    ctx.shadowBlur = 10;\n    \n    ctx.drawImage(img, -charWidth/2, -charHeight/2, charWidth, charHeight);\n    \n    ctx.restore();\n\n    // Ambient particle field\n    for (let i = 0; i < 15; i++) {\n      const angle = (frame * 0.01 + i * 0.4);\n      const radius = 80 + Math.sin(frame * 0.02 + i) * 20;\n      const particleX = centerX + Math.cos(angle) * radius;\n      const particleY = centerY + Math.sin(angle) * radius;\n      const alpha = 0.3 + Math.sin(frame * 0.03 + i) * 0.2;\n      \n      ctx.fillStyle = `rgba(0, 255, 255, ${alpha})`;\n      ctx.beginPath();\n      ctx.arc(particleX, particleY, 1, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    // Neural interface overlay\n    ctx.strokeStyle = 'rgba(0, 255, 255, 0.1)';\n    ctx.lineWidth = 1;\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, 100 + Math.sin(frame * 0.02) * 5, 0, Math.PI * 2);\n    ctx.stroke();\n  };\n\n  return (\n    <div className={`relative ${variant === 'loading' ? 'w-full h-full' : 'w-64 h-64'}`}>\n      <canvas\n        ref={canvasRef}\n        className=\"w-full h-full\"\n        style={{\n          imageRendering: 'pixelated',\n        }}\n      />\n      \n      {variant === 'loading' && (\n        <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 text-center\">\n          <div className=\"text-cyan-400 font-mono text-sm mb-2\">\n            MATERIALIZING NEURAL AVATAR...\n          </div>\n          <div className=\"w-64 h-1 bg-gray-800 relative\">\n            <div \n              className=\"h-full bg-gradient-to-r from-cyan-400 to-green-400 transition-all duration-100\"\n              style={{ width: `${(animationFrame / 180) * 100}%` }}\n            />\n          </div>\n          <div className=\"text-cyan-300/60 font-mono text-xs mt-2\">\n            {Math.round((animationFrame / 180) * 100)}% COMPLETE\n          </div>\n        </div>\n      )}\n\n      {variant === 'menu' && !isLoaded && (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-black/80\">\n          <div className=\"text-cyan-400 font-mono text-sm animate-pulse\">\n            LOADING CHARACTER...\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":7885},"client/src/components/KingLemmiViewer.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAudio } from \"@/hooks/useAudio\";\n\ninterface KingLemmiViewerProps {\n  walletAddress: string | null;\n}\n\nexport default function KingLemmiViewer({ walletAddress }: KingLemmiViewerProps) {\n  const { playClick, playHover } = useAudio();\n\n  const { data: featuresData } = useQuery({\n    queryKey: [\"/api/features\", walletAddress],\n    enabled: !!walletAddress,\n  });\n\n  const unlockedCount = (featuresData as any)?.kingLemmiUnlocked || 5;\n  const totalCount = 10;\n\n  return (\n    <div className=\"h-full\">\n      <div className=\"flex items-center space-x-3 mb-4\">\n        <div className=\"w-12 h-12 rounded bg-gradient-to-br from-purple-500 to-pink-500 p-0.5\">\n          <div className=\"w-full h-full rounded bg-black flex items-center justify-center\">\n            <span className=\"text-2xl\">üëë</span>\n          </div>\n        </div>\n        <div>\n          <h3 className=\"font-orbitron font-bold text-purple-400\">KING LEMMI</h3>\n          <p className=\"text-xs text-gray-400\">Visual Collection</p>\n        </div>\n        <div className=\"ml-auto\">\n          <div className=\"w-10 h-10 rounded-full overflow-hidden border-2 border-purple-500 animate-pulse-slow\">\n            <div className=\"w-full h-full bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center\">\n              <span className=\"text-lg\">ü§ñ</span>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"space-y-3\">\n        <div className=\"bg-black/50 rounded border border-purple-500/20 p-3\">\n          <div className=\"font-mono text-xs text-purple-400 mb-1\">COLLECTION STATUS</div>\n          <div className=\"text-sm font-bold\">{unlockedCount}/{totalCount} UNLOCKED</div>\n        </div>\n        \n        <div className=\"bg-black/50 rounded border border-pink-500/20 p-3\">\n          <div className=\"flex justify-between text-xs mb-2\">\n            <span>Progress</span>\n            <span>{Math.round((unlockedCount / totalCount) * 100)}%</span>\n          </div>\n          <div className=\"w-full bg-gray-700 rounded-full h-2\">\n            <div \n              className=\"bg-gradient-to-r from-purple-500 to-pink-500 h-2 rounded-full transition-all duration-500\"\n              style={{ width: `${(unlockedCount / totalCount) * 100}%` }}\n            />\n          </div>\n        </div>\n        \n        <Button \n          className=\"w-full bg-purple-500/20 border border-purple-500/50 rounded px-3 py-2 text-sm font-mono hover:bg-purple-500/30 transition-all text-purple-400\"\n          onMouseEnter={playHover}\n          onClick={playClick}\n        >\n          OPEN GALLERY\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2759},"client/src/components/LoadingScreen.tsx":{"content":"import { HDCharacterAnimation } from './HDCharacterAnimation';\n\ninterface LoadingScreenProps {\n  onLoadingComplete: () => void;\n}\n\nexport function LoadingScreen({ onLoadingComplete }: LoadingScreenProps) {\n  return (\n    <div className=\"fixed inset-0 bg-black flex items-center justify-center z-50 font-mono\">\n      {/* CRT Effect */}\n      <div className=\"absolute inset-0 bg-gradient-to-b from-transparent via-cyan-500/5 to-transparent animate-pulse\"></div>\n      \n      <div className=\"text-center w-full h-full flex flex-col items-center justify-center px-6\">\n        {/* Logo/Title */}\n        <div className=\"mb-8\">\n          <div className=\"text-xs text-cyan-400/60 mb-2\">\n            &gt; BOOTING_SYSTEM.EXE\n          </div>\n          <h1 className=\"text-5xl font-orbitron font-black text-cyan-400 mb-2 animate-pulse tracking-wider\">\n            LEMMI.RUN\n          </h1>\n          <h2 className=\"text-lg font-orbitron font-bold text-green-400 mb-2 tracking-widest\">\n            GERBIL_EDITION_v2.1\n          </h2>\n          <div className=\"text-xs text-cyan-300/60\">\n            CARDANO // NEURAL_INTERFACE // GERBIL_PROTOCOL\n          </div>\n        </div>\n        \n        {/* HD Character Animation - Full Screen */}\n        <div className=\"flex-1 w-full max-w-lg mx-auto\">\n          <HDCharacterAnimation \n            variant=\"loading\" \n            onAnimationComplete={onLoadingComplete}\n          />\n        </div>\n      </div>\n      \n      {/* Terminal Scanlines effect */}\n      <div className=\"absolute inset-0 pointer-events-none crt-screen\">\n        <div className=\"h-full w-full bg-gradient-to-b from-transparent via-cyan-400/5 to-transparent animate-pulse\"></div>\n      </div>\n    </div>\n  );\n}","size_bytes":1716},"client/src/components/MiniGameTikus.tsx":{"content":"import { useState, useEffect, useCallback, useRef } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAudio } from \"@/hooks/useAudio\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface MiniGameTikusProps {\n  onClose: () => void;\n  walletAddress: string | null;\n}\n\ninterface GameState {\n  mouseX: number;\n  mouseY: number;\n  cheeseX: number;\n  cheeseY: number;\n  laserX: number;\n  laserY: number;\n  score: number;\n  gameActive: boolean;\n  lives: number;\n}\n\nexport default function MiniGameTikus({ onClose, walletAddress }: MiniGameTikusProps) {\n  const [gameState, setGameState] = useState<GameState>({\n    mouseX: 150,\n    mouseY: 150,\n    cheeseX: 300,\n    cheeseY: 100,\n    laserX: 100,\n    laserY: 200,\n    score: 0,\n    gameActive: true,\n    lives: 3,\n  });\n  \n  const [highScore, setHighScore] = useState(0);\n  const gameAreaRef = useRef<HTMLDivElement>(null);\n  const { playClick, playHover, playSuccess, playError } = useAudio();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Load high score on mount\n  useEffect(() => {\n    if (walletAddress) {\n      fetch(`/api/game/${walletAddress}/tikus-escape/scores`)\n        .then(res => res.json())\n        .then(data => setHighScore(data.highScore || 0))\n        .catch(console.error);\n    }\n  }, [walletAddress]);\n\n  const submitScoreMutation = useMutation({\n    mutationFn: async (score: number) => {\n      const response = await apiRequest(\"POST\", \"/api/game/score\", {\n        walletAddress,\n        game: \"tikus-escape\",\n        score,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.isNewRecord) {\n        playSuccess();\n        toast({\n          title: \"New High Score!\",\n          description: `Congratulations! Score: ${data.score}`,\n        });\n      }\n      queryClient.invalidateQueries({ queryKey: [\"/api/game\"] });\n    },\n  });\n\n  const handleKeyPress = useCallback((event: KeyboardEvent) => {\n    if (!gameState.gameActive) return;\n\n    const moveSpeed = 15;\n    const gameArea = gameAreaRef.current;\n    if (!gameArea) return;\n\n    const rect = gameArea.getBoundingClientRect();\n    const maxX = rect.width - 40; // Mouse size\n    const maxY = rect.height - 40;\n\n    setGameState(prev => {\n      let newX = prev.mouseX;\n      let newY = prev.mouseY;\n\n      switch (event.key.toLowerCase()) {\n        case 'w':\n        case 'arrowup':\n          newY = Math.max(0, prev.mouseY - moveSpeed);\n          break;\n        case 's':\n        case 'arrowdown':\n          newY = Math.min(maxY, prev.mouseY + moveSpeed);\n          break;\n        case 'a':\n        case 'arrowleft':\n          newX = Math.max(0, prev.mouseX - moveSpeed);\n          break;\n        case 'd':\n        case 'arrowright':\n          newX = Math.min(maxX, prev.mouseX + moveSpeed);\n          break;\n        case 'escape':\n          onClose();\n          return prev;\n        default:\n          return prev;\n      }\n\n      return { ...prev, mouseX: newX, mouseY: newY };\n    });\n  }, [gameState.gameActive, onClose]);\n\n  // Game loop for laser movement\n  useEffect(() => {\n    if (!gameState.gameActive) return;\n\n    const interval = setInterval(() => {\n      setGameState(prev => {\n        const gameArea = gameAreaRef.current;\n        if (!gameArea) return prev;\n\n        const rect = gameArea.getBoundingClientRect();\n        let newLaserX = prev.laserX + (Math.random() - 0.5) * 10;\n        let newLaserY = prev.laserY + (Math.random() - 0.5) * 10;\n\n        // Keep laser in bounds\n        newLaserX = Math.max(0, Math.min(rect.width - 30, newLaserX));\n        newLaserY = Math.max(0, Math.min(rect.height - 30, newLaserY));\n\n        // Check collision with mouse\n        const mouseDistance = Math.sqrt(\n          Math.pow(prev.mouseX - newLaserX, 2) + Math.pow(prev.mouseY - newLaserY, 2)\n        );\n\n        if (mouseDistance < 35) {\n          playError();\n          const newLives = prev.lives - 1;\n          if (newLives <= 0) {\n            // Game over\n            if (walletAddress && prev.score > 0) {\n              submitScoreMutation.mutate(prev.score);\n            }\n            return { ...prev, gameActive: false, lives: 0 };\n          }\n          return { ...prev, lives: newLives, laserX: newLaserX, laserY: newLaserY };\n        }\n\n        return { ...prev, laserX: newLaserX, laserY: newLaserY };\n      });\n    }, 200);\n\n    return () => clearInterval(interval);\n  }, [gameState.gameActive, playError, submitScoreMutation, walletAddress]);\n\n  // Keyboard event listeners\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [handleKeyPress]);\n\n  const handleCheeseClick = () => {\n    if (!gameState.gameActive) return;\n    \n    playClick();\n    setGameState(prev => {\n      const newScore = prev.score + 10;\n      const gameArea = gameAreaRef.current;\n      if (!gameArea) return prev;\n      \n      const rect = gameArea.getBoundingClientRect();\n      const newCheeseX = Math.random() * (rect.width - 30);\n      const newCheeseY = Math.random() * (rect.height - 30);\n\n      return {\n        ...prev,\n        score: newScore,\n        cheeseX: newCheeseX,\n        cheeseY: newCheeseY,\n      };\n    });\n  };\n\n  const restartGame = () => {\n    playClick();\n    setGameState({\n      mouseX: 150,\n      mouseY: 150,\n      cheeseX: 300,\n      cheeseY: 100,\n      laserX: 100,\n      laserY: 200,\n      score: 0,\n      gameActive: true,\n      lives: 3,\n    });\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 bg-black/80 backdrop-blur-sm\">\n      <div className=\"flex items-center justify-center min-h-screen p-4\">\n        <div className=\"glass-morph rounded-lg p-8 max-w-2xl w-full neon-border\">\n          <div className=\"text-center mb-6\">\n            <h2 className=\"text-3xl font-orbitron font-bold text-cyber-cyan mb-2\">\n              üê≠ TIKUS NEURAL ESCAPE\n            </h2>\n            <p className=\"text-sm text-gray-400 font-mono\">\n              Unauthorized rodent detected in neural subsystem!\n            </p>\n          </div>\n          \n          <div className=\"bg-cyber-dark/50 rounded-lg p-4 mb-4 border border-cyber-cyan/20\">\n            <div className=\"font-mono text-xs text-cyber-green mb-2\">\n              [GAME_CONTROLS] WASD: Move ‚Ä¢ CLICK: Eat Cheese ‚Ä¢ ESC: Exit\n            </div>\n            <div \n              ref={gameAreaRef}\n              className=\"h-64 bg-gradient-to-br from-cyber-dark to-cyber-blue/20 rounded border border-cyber-cyan/30 relative overflow-hidden cursor-crosshair\"\n            >\n              {/* Mouse */}\n              <div \n                className=\"absolute text-4xl transition-all duration-100 z-10\"\n                style={{ \n                  left: `${gameState.mouseX}px`, \n                  top: `${gameState.mouseY}px`,\n                  transform: 'translate(-50%, -50%)'\n                }}\n              >\n                üê≠\n              </div>\n              \n              {/* Cheese */}\n              <div \n                className=\"absolute text-2xl animate-pulse cursor-pointer z-10\"\n                style={{ \n                  left: `${gameState.cheeseX}px`, \n                  top: `${gameState.cheeseY}px`,\n                  transform: 'translate(-50%, -50%)'\n                }}\n                onClick={handleCheeseClick}\n              >\n                üßÄ\n              </div>\n              \n              {/* Laser */}\n              <div \n                className=\"absolute text-red-500 text-2xl animate-pulse z-10\"\n                style={{ \n                  left: `${gameState.laserX}px`, \n                  top: `${gameState.laserY}px`,\n                  transform: 'translate(-50%, -50%)'\n                }}\n              >\n                ‚ö°\n              </div>\n\n              {/* Game Over Overlay */}\n              {!gameState.gameActive && (\n                <div className=\"absolute inset-0 bg-black/70 flex items-center justify-center z-20\">\n                  <div className=\"text-center\">\n                    <h3 className=\"text-2xl font-orbitron font-bold text-red-400 mb-2\">\n                      NEURAL BREACH!\n                    </h3>\n                    <p className=\"text-cyber-cyan font-mono mb-4\">\n                      Final Score: {gameState.score}\n                    </p>\n                    <Button\n                      onClick={restartGame}\n                      className=\"glass-morph rounded px-4 py-2 font-mono hover:bg-cyber-cyan/10 transition-all\"\n                      onMouseEnter={playHover}\n                    >\n                      RESTART SIMULATION\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"flex justify-between items-center\">\n            <div className=\"font-mono text-sm space-x-4\">\n              <span className=\"text-cyber-cyan\">SCORE: {gameState.score}</span>\n              <span className=\"text-cyber-magenta\">HIGH: {Math.max(highScore, gameState.score)}</span>\n              <span className=\"text-cyber-green\">LIVES: {gameState.lives}</span>\n            </div>\n            <Button \n              onClick={onClose}\n              className=\"glass-morph rounded px-4 py-2 font-mono hover:bg-red-500/10 transition-all\"\n              onMouseEnter={playHover}\n            >\n              EXIT NEURAL SUBSYSTEM\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9613},"client/src/components/NeuralFeatureCard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAudio } from \"@/hooks/useAudio\";\n\ninterface NeuralFeatureCardProps {\n  title: string;\n  subtitle: string;\n  icon: string;\n  status: boolean;\n  walletAddress: string | null;\n  gradientFrom: string;\n  gradientTo: string;\n  delay: number;\n}\n\nexport default function NeuralFeatureCard({ \n  title, \n  subtitle, \n  icon, \n  status, \n  walletAddress,\n  gradientFrom,\n  gradientTo,\n  delay \n}: NeuralFeatureCardProps) {\n  const { playClick, playHover } = useAudio();\n\n  const { data: nftData, refetch } = useQuery({\n    queryKey: [\"/api/wallet\", walletAddress, \"nfts\"],\n    enabled: !!walletAddress,\n  });\n\n  const handleVerifyNFT = async () => {\n    playClick();\n    if (walletAddress) {\n      await refetch();\n    }\n  };\n\n  return (\n    <div className=\"h-full\">\n      <div className=\"flex items-center space-x-3 mb-4\">\n        <div className=\"w-12 h-12 rounded bg-gradient-to-br from-cyber-green to-cyber-cyan p-0.5\">\n          <div className=\"w-full h-full rounded bg-black flex items-center justify-center\">\n            <span className=\"text-2xl\">{icon}</span>\n          </div>\n        </div>\n        <div>\n          <h3 className=\"font-orbitron font-bold text-cyber-green\">{title}</h3>\n          <p className=\"text-xs text-gray-400\">{subtitle}</p>\n        </div>\n        <div className=\"ml-auto\">\n          <div className={`w-4 h-4 rounded-full animate-pulse ${status ? 'bg-cyber-green' : 'bg-red-500'}`} />\n        </div>\n      </div>\n      \n      <div className=\"space-y-3\">\n        <div className=\"bg-black/50 rounded border border-cyber-green/20 p-3\">\n          <div className=\"font-mono text-xs text-cyber-green mb-1\">NFT VERIFICATION</div>\n          <div className=\"text-sm font-bold\">\n            {(nftData as any)?.hasGerbilNft ? \"‚úÖ GERBIL DETECTED\" : \"‚ùå NO NFT FOUND\"}\n          </div>\n        </div>\n        \n        <div className=\"bg-black/50 rounded border border-cyber-cyan/20 p-3\">\n          <div className=\"font-mono text-xs text-cyber-cyan mb-1\">ACCESS LEVEL</div>\n          <div className=\"text-sm font-bold\">{status ? \"PREMIUM\" : \"GUEST\"}</div>\n        </div>\n        \n        <Button \n          onClick={handleVerifyNFT}\n          className=\"w-full bg-cyber-green/20 border border-cyber-green/50 rounded px-3 py-2 text-sm font-mono hover:bg-cyber-green/30 transition-all text-cyber-green\"\n          onMouseEnter={playHover}\n        >\n          SCAN WALLET\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2537},"client/src/components/ReferralPanel.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAudio } from \"@/hooks/useAudio\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ReferralPanelProps {\n  walletAddress: string | null;\n}\n\nexport default function ReferralPanel({ walletAddress }: ReferralPanelProps) {\n  const [generatedLink, setGeneratedLink] = useState<string>(\"\");\n  const { playClick, playHover, playSuccess } = useAudio();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: referralData } = useQuery({\n    queryKey: [\"/api/referral\", walletAddress],\n    enabled: !!walletAddress,\n  });\n\n  const generateReferralMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/referral\", { walletAddress });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setGeneratedLink(data.link);\n      playSuccess();\n      toast({\n        title: \"Referral Link Generated!\",\n        description: `Code: ${data.code}`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/referral\", walletAddress] });\n    },\n  });\n\n  const handleGenerateLink = () => {\n    playClick();\n    if (walletAddress) {\n      generateReferralMutation.mutate();\n    }\n  };\n\n  const handleCopyLink = () => {\n    playClick();\n    if (generatedLink) {\n      navigator.clipboard.writeText(generatedLink);\n      toast({\n        title: \"Copied!\",\n        description: \"Referral link copied to clipboard\",\n      });\n    }\n  };\n\n  const totalReferred = (referralData as any)?.totalReferred || 0;\n\n  return (\n    <div \n      className=\"glass-morph rounded-lg p-6 neon-border hover:bg-cyber-gold/5 transition-all duration-300 animate-float\"\n      style={{ animationDelay: \"-3s\" }}\n      onMouseEnter={playHover}\n    >\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 rounded-lg bg-gradient-to-br from-cyber-gold to-orange-500 p-0.5\">\n            <div className=\"w-full h-full rounded-lg bg-cyber-dark flex items-center justify-center\">\n              <span className=\"text-lg\">üîó</span>\n            </div>\n          </div>\n          <div>\n            <h3 className=\"font-orbitron font-bold text-cyber-gold\">REFERRAL SYSTEM</h3>\n            <p className=\"text-xs text-gray-400\">Generate Unique Links</p>\n          </div>\n        </div>\n        <div className=\"text-right\">\n          <div className=\"text-xl font-mono font-bold text-cyber-green\">{totalReferred}</div>\n          <div className=\"text-xs text-gray-400\">Referred</div>\n        </div>\n      </div>\n      \n      <div className=\"space-y-2\">\n        {generatedLink && (\n          <div className=\"bg-cyber-dark/50 rounded p-2 font-mono text-xs\">\n            <span className=\"text-cyber-cyan\">LINK:</span> \n            <button \n              onClick={handleCopyLink}\n              className=\"ml-2 text-cyber-gold hover:text-cyber-cyan transition-colors cursor-pointer\"\n            >\n              {generatedLink.slice(0, 30)}...\n            </button>\n          </div>\n        )}\n        \n        <div className=\"bg-cyber-dark/50 rounded p-2 font-mono text-xs\">\n          <span className=\"text-cyber-cyan\">ACTIVE_REFS:</span> \n          <span className=\"ml-2\">{(referralData as any)?.activeReferrals || 0}</span>\n        </div>\n        \n        <Button \n          onClick={handleGenerateLink}\n          disabled={generateReferralMutation.isPending || !walletAddress}\n          className=\"w-full glass-morph rounded px-3 py-2 text-sm font-mono hover:bg-cyber-gold/10 transition-all\"\n          onMouseEnter={playHover}\n        >\n          {generateReferralMutation.isPending ? \"GENERATING...\" : \"GENERATE NEW LINK\"}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3938},"client/src/components/RetroWalletScanner.tsx":{"content":"import { useState, useEffect } from 'react';\n\ninterface RetroWalletScannerProps {\n  onConnect: () => void;\n  isConnected: boolean;\n  address?: string;\n  hasNft?: boolean;\n}\n\nexport function RetroWalletScanner({ onConnect, isConnected, address, hasNft }: RetroWalletScannerProps) {\n  const [scanning, setScanning] = useState(false);\n  const [scanProgress, setScanProgress] = useState(0);\n  const [terminalLines, setTerminalLines] = useState<string[]>([]);\n  const [currentLine, setCurrentLine] = useState('');\n\n  const scanSequence = [\n    '> INITIALIZING NEURAL SCAN...',\n    '> DETECTING CARDANO NODES...',\n    '> SCANNING FOR LACE WALLET...',\n    '> ANALYZING BLOCKCHAIN DATA...',\n    '> VERIFYING NFT COLLECTION...',\n    '> ESTABLISHING SECURE LINK...',\n    '> CONNECTION ESTABLISHED!'\n  ];\n\n  useEffect(() => {\n    if (scanning) {\n      let lineIndex = 0;\n      let progress = 0;\n      setTerminalLines([]);\n      \n      const interval = setInterval(() => {\n        if (lineIndex < scanSequence.length) {\n          setTerminalLines(prev => [...prev, scanSequence[lineIndex]]);\n          lineIndex++;\n          progress += 14.3;\n          setScanProgress(Math.min(progress, 100));\n        } else {\n          clearInterval(interval);\n          setTimeout(() => {\n            setScanning(false);\n            onConnect();\n          }, 500);\n        }\n      }, 400);\n\n      return () => clearInterval(interval);\n    }\n  }, [scanning, onConnect]);\n\n  // Blinking cursor effect\n  useEffect(() => {\n    const cursorInterval = setInterval(() => {\n      setCurrentLine(prev => prev === '_' ? ' ' : '_');\n    }, 500);\n\n    return () => clearInterval(cursorInterval);\n  }, []);\n\n  const startScan = () => {\n    if (!isConnected && !scanning) {\n      setScanning(true);\n      setScanProgress(0);\n    }\n  };\n\n  if (isConnected) {\n    return (\n      <div className=\"bg-black border border-green-400 px-4 py-3 relative font-mono\">\n        <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-green-400\"></div>\n        <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-green-400\"></div>\n        \n        <div className=\"text-xs text-green-400/60 mb-1\">WALLET_STATUS:</div>\n        <div className=\"text-sm text-green-300 font-bold mb-2\">CONNECTED</div>\n        \n        <div className=\"text-xs text-green-400/60 mb-1\">ADDRESS:</div>\n        <div className=\"text-xs text-green-300 font-bold mb-2 break-all\">\n          {address ? `${address.slice(0, 8)}...${address.slice(-6)}` : 'N/A'}\n        </div>\n        \n        <div className=\"text-xs text-green-400/60 mb-1\">NFT_SCAN:</div>\n        <div className={`text-xs font-bold ${hasNft ? 'text-cyan-300' : 'text-yellow-300'}`}>\n          {hasNft ? 'GERBIL_DETECTED ‚úì' : 'NO_GERBIL_FOUND'}\n        </div>\n        \n        <div className=\"mt-2 w-full h-1 bg-gray-800 relative\">\n          <div className=\"h-full w-full bg-green-400 animate-pulse\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-black border border-cyan-400 relative font-mono\">\n      <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-cyan-400\"></div>\n      <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-cyan-400\"></div>\n      \n      {scanning ? (\n        <div className=\"px-4 py-3\">\n          <div className=\"text-xs text-cyan-400/60 mb-2\">NEURAL_SCANNER_v2.1:</div>\n          \n          {/* Terminal Output */}\n          <div className=\"h-32 mb-3 overflow-hidden\">\n            {terminalLines.map((line, i) => (\n              <div key={i} className=\"text-xs text-cyan-300 mb-1 animate-pulse\">\n                {line}\n              </div>\n            ))}\n            <div className=\"text-xs text-cyan-300\">\n              {scanning && scanProgress < 100 && (\n                <span className=\"animate-pulse\">SCANNING{currentLine}</span>\n              )}\n            </div>\n          </div>\n          \n          {/* Progress Bar */}\n          <div className=\"mb-2\">\n            <div className=\"text-xs text-cyan-400/60 mb-1\">\n              PROGRESS: {scanProgress.toFixed(0)}%\n            </div>\n            <div className=\"w-full h-2 bg-gray-800 border border-cyan-400/30 relative\">\n              <div \n                className=\"h-full bg-gradient-to-r from-cyan-400 to-green-400 transition-all duration-300\"\n                style={{ width: `${scanProgress}%` }}\n              ></div>\n              <div className=\"absolute inset-0 bg-cyan-400/10 animate-pulse\"></div>\n            </div>\n          </div>\n          \n          <div className=\"text-xs text-yellow-300 animate-pulse\">\n            PLEASE WAIT... DO NOT DISCONNECT\n          </div>\n        </div>\n      ) : (\n        <button\n          onClick={startScan}\n          className=\"w-full px-4 py-3 text-left hover:bg-cyan-900/20 transition-all duration-200 group\"\n        >\n          <div className=\"text-xs text-cyan-400/60 mb-1\">WALLET_SCANNER:</div>\n          <div className=\"text-sm text-cyan-300 font-bold mb-2 group-hover:animate-pulse\">\n            CLICK TO SCAN\n          </div>\n          <div className=\"text-xs text-cyan-400/60 mb-2\">\n            &gt; NEURAL_LINK.EXE\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-cyan-400 animate-pulse\"></div>\n            <div className=\"text-xs text-cyan-400\">READY_TO_SCAN</div>\n            <div className=\"text-cyan-400 group-hover:animate-bounce ml-auto\">&gt;&gt;</div>\n          </div>\n        </button>\n      )}\n    </div>\n  );\n}","size_bytes":5450},"client/src/components/SkillRewardPanel.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAudio } from \"@/hooks/useAudio\";\n\ninterface SkillRewardPanelProps {\n  walletAddress: string | null;\n}\n\nexport default function SkillRewardPanel({ walletAddress }: SkillRewardPanelProps) {\n  const { playClick, playHover } = useAudio();\n\n  const { data: skillsData, isLoading } = useQuery({\n    queryKey: [\"/api/skills\", walletAddress],\n    enabled: !!walletAddress,\n  });\n\n  const efficiency = (skillsData as any)?.efficiency || 0;\n  const neuralSync = (skillsData as any)?.neuralSync || 0;\n  const maxSync = 1000;\n  const syncPercentage = Math.min((neuralSync / maxSync) * 100, 100);\n\n  return (\n    <div \n      className=\"glass-morph rounded-lg p-6 neon-border hover:bg-blue-500/5 transition-all duration-300 animate-float\"\n      style={{ animationDelay: \"-2s\" }}\n      onMouseEnter={playHover}\n    >\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 rounded-lg bg-gradient-to-br from-blue-500 to-purple-500 p-0.5\">\n            <div className=\"w-full h-full rounded-lg bg-cyber-dark flex items-center justify-center\">\n              <span className=\"text-lg\">‚ö°</span>\n            </div>\n          </div>\n          <div>\n            <h3 className=\"font-orbitron font-bold text-blue-400\">SKILL REWARDS</h3>\n            <p className=\"text-xs text-gray-400\">Performance Tracking</p>\n          </div>\n        </div>\n        <div className=\"text-right\">\n          <div className=\"text-xl font-mono font-bold text-cyber-cyan\">\n            {isLoading ? \"...\" : `${efficiency.toFixed(1)}%`}\n          </div>\n          <div className=\"text-xs text-gray-400\">Efficiency</div>\n        </div>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <div className=\"bg-cyber-dark/50 rounded p-2\">\n          <div className=\"flex justify-between text-xs mb-1\">\n            <span>Neural Sync</span>\n            <span>{neuralSync}/{maxSync}</span>\n          </div>\n          <div className=\"w-full bg-gray-700 rounded-full h-2\">\n            <div \n              className=\"bg-gradient-to-r from-cyber-cyan to-cyber-green h-2 rounded-full transition-all duration-500\"\n              style={{ width: `${syncPercentage}%` }}\n            />\n          </div>\n        </div>\n        \n        <div className=\"bg-cyber-dark/50 rounded p-2 font-mono text-xs\">\n          <span className=\"text-cyber-cyan\">TOTAL_REWARDS:</span> \n          <span className=\"ml-2\">{(skillsData as any)?.totalRewards || 0}</span>\n        </div>\n        \n        <Button \n          className=\"w-full glass-morph rounded px-3 py-2 text-sm font-mono hover:bg-blue-500/10 transition-all\"\n          onMouseEnter={playHover}\n          onClick={playClick}\n        >\n          VIEW DETAILED STATS\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2909},"client/src/components/TokenDisplay.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAudio } from \"@/hooks/useAudio\";\n\ninterface TokenDisplayProps {\n  walletAddress: string | null;\n}\n\nexport default function TokenDisplay({ walletAddress }: TokenDisplayProps) {\n  const { playClick, playHover } = useAudio();\n\n  const { data: tokenData, refetch, isLoading } = useQuery({\n    queryKey: [\"/api/wallet\", walletAddress, \"lemmi\"],\n    enabled: !!walletAddress,\n    refetchInterval: 30000,\n  });\n\n  const handleRefreshBalance = async () => {\n    playClick();\n    await refetch();\n  };\n\n  const balance = (tokenData as any)?.balance || 0;\n  const lastUpdate = new Date().toLocaleTimeString();\n\n  return (\n    <div className=\"h-full\">\n      <div className=\"flex items-center space-x-3 mb-4\">\n        <div className=\"w-12 h-12 rounded bg-gradient-to-br from-cyber-magenta to-cyber-gold p-0.5\">\n          <div className=\"w-full h-full rounded bg-black flex items-center justify-center\">\n            <span className=\"text-2xl\">üíé</span>\n          </div>\n        </div>\n        <div>\n          <h3 className=\"font-orbitron font-bold text-cyber-magenta\">$LEMMI TOKENS</h3>\n          <p className=\"text-xs text-gray-400\">Digital Currency</p>\n        </div>\n      </div>\n      \n      <div className=\"space-y-3\">\n        <div className=\"bg-black/50 rounded border border-cyber-magenta/20 p-4 text-center\">\n          <div className=\"text-3xl font-mono font-bold text-cyber-gold mb-1\">\n            {isLoading ? \"...\" : balance.toLocaleString()}\n          </div>\n          <div className=\"text-xs text-gray-400\">$LEMMI</div>\n        </div>\n        \n        <div className=\"bg-black/50 rounded border border-cyber-cyan/20 p-3\">\n          <div className=\"font-mono text-xs text-cyber-cyan mb-1\">LAST UPDATE</div>\n          <div className=\"text-sm font-bold\">{lastUpdate}</div>\n        </div>\n        \n        <Button \n          onClick={handleRefreshBalance}\n          disabled={isLoading}\n          className=\"w-full bg-cyber-magenta/20 border border-cyber-magenta/50 rounded px-3 py-2 text-sm font-mono hover:bg-cyber-magenta/30 transition-all text-cyber-magenta\"\n          onMouseEnter={playHover}\n        >\n          {isLoading ? \"SYNCING...\" : \"REFRESH BALANCE\"}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2323},"client/src/components/WalletConnect.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAudio } from \"@/hooks/useAudio\";\n\ninterface WalletConnectProps {\n  onConnect: () => Promise<void>;\n  isConnected: boolean;\n  address: string | null;\n  hasNft: boolean;\n}\n\nexport default function WalletConnect({ onConnect, isConnected, address, hasNft }: WalletConnectProps) {\n  const [isConnecting, setIsConnecting] = useState(false);\n  const { playClick, playHover } = useAudio();\n\n  const handleConnect = async () => {\n    setIsConnecting(true);\n    playClick();\n    try {\n      await onConnect();\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  if (isConnected && address) {\n    return (\n      <div className=\"flex items-center space-x-3\">\n        {/* Unity-style Status Panel */}\n        <div className=\"bg-black border border-green-400 px-4 py-2 relative\">\n          <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-green-400\"></div>\n          <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-green-400\"></div>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-3 h-3 bg-green-400\"></div>\n            <div>\n              <div className=\"text-xs font-orbitron text-green-400 font-bold tracking-wider\">LACE ONLINE</div>\n              <div className=\"text-xs font-mono text-green-300/80\">\n                {address.slice(0, 8)}...{address.slice(-6)}\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Unity-style NFT Badge */}\n        {hasNft && (\n          <div className=\"bg-black border border-purple-400 px-3 py-2 relative\">\n            <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-purple-400\"></div>\n            <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-purple-400\"></div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-purple-400\"></div>\n              <span className=\"text-xs font-orbitron text-purple-300 font-bold tracking-wider\">GERBIL VERIFIED</span>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      onClick={handleConnect}\n      className={`bg-black border border-orange-400 px-6 py-3 cursor-pointer transition-all duration-200 relative ${\n        isConnecting ? 'opacity-75 cursor-not-allowed' : 'hover:bg-orange-900/20'\n      }`}\n      onMouseEnter={playHover}\n    >\n      <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-orange-400\"></div>\n      <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-orange-400\"></div>\n      <div className=\"flex items-center space-x-3\">\n        {isConnecting ? (\n          <>\n            <div className=\"w-4 h-4 border border-orange-300 border-t-transparent animate-spin\"></div>\n            <span className=\"font-orbitron text-orange-300 font-bold tracking-wider\">CONNECTING...</span>\n          </>\n        ) : (\n          <>\n            <div className=\"w-3 h-3 bg-orange-400\"></div>\n            <span className=\"font-orbitron text-orange-300 font-bold tracking-wider\">CONNECT LACE</span>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3101},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAudio.ts":{"content":"import { useCallback, useRef, useEffect } from \"react\";\n\ninterface AudioState {\n  clickSound: HTMLAudioElement | null;\n  hoverSound: HTMLAudioElement | null;\n  backgroundMusic: HTMLAudioElement | null;\n}\n\nexport function useAudio() {\n  const audioRef = useRef<AudioState>({\n    clickSound: null,\n    hoverSound: null,\n    backgroundMusic: null,\n  });\n\n  useEffect(() => {\n    // Initialize audio elements\n    try {\n      // Create audio context for web audio API\n      const AudioContext = window.AudioContext || (window as any).webkitAudioContext;\n      const audioContext = new AudioContext();\n\n      // For now, use simple beep sounds generated by Web Audio API\n      // In production, these would be actual audio files\n      audioRef.current = {\n        clickSound: null,\n        hoverSound: null,\n        backgroundMusic: null,\n      };\n    } catch (error) {\n      console.warn(\"Audio API not available\");\n    }\n  }, []);\n\n  const playBeep = useCallback((frequency: number, duration: number, volume = 0.1) => {\n    try {\n      const AudioContext = window.AudioContext || (window as any).webkitAudioContext;\n      const audioContext = new AudioContext();\n      \n      const oscillator = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n      \n      oscillator.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      \n      oscillator.frequency.value = frequency;\n      oscillator.type = 'square';\n      \n      gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n      gainNode.gain.linearRampToValueAtTime(volume, audioContext.currentTime + 0.01);\n      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);\n      \n      oscillator.start(audioContext.currentTime);\n      oscillator.stop(audioContext.currentTime + duration);\n    } catch (error) {\n      // Fallback to console beep if audio fails\n      console.log(\"üîä Beep!\");\n    }\n  }, []);\n\n  const playClick = useCallback(() => {\n    playBeep(800, 0.1, 0.05);\n  }, [playBeep]);\n\n  const playHover = useCallback(() => {\n    playBeep(600, 0.05, 0.03);\n  }, [playBeep]);\n\n  const playSuccess = useCallback(() => {\n    playBeep(523, 0.2, 0.05);\n    setTimeout(() => playBeep(659, 0.2, 0.05), 100);\n    setTimeout(() => playBeep(784, 0.3, 0.05), 200);\n  }, [playBeep]);\n\n  const playError = useCallback(() => {\n    playBeep(300, 0.3, 0.05);\n  }, [playBeep]);\n\n  const playNotification = useCallback(() => {\n    playBeep(880, 0.1, 0.03);\n    setTimeout(() => playBeep(1175, 0.1, 0.03), 150);\n  }, [playBeep]);\n\n  return {\n    playClick,\n    playHover,\n    playSuccess,\n    playError,\n    playNotification,\n  };\n}\n\n// Extend window for audio context types\ndeclare global {\n  interface Window {\n    AudioContext?: typeof AudioContext;\n    webkitAudioContext?: typeof AudioContext;\n  }\n}\n","size_bytes":2832},"client/src/hooks/useWallet.ts":{"content":"import { useState, useEffect, useCallback } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface WalletState {\n  walletAddress: string | null;\n  isConnected: boolean;\n  hasGerbilNft: boolean;\n  lemmiBalance: number;\n  chain: 'ethereum' | 'solana' | 'cardano' | null;\n}\n\nexport function useWallet() {\n  const [walletState, setWalletState] = useState<WalletState>({\n    walletAddress: null,\n    isConnected: false,\n    hasGerbilNft: false,\n    lemmiBalance: 0,\n    chain: null,\n  });\n\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Check for existing wallet connection on mount\n  useEffect(() => {\n    checkExistingConnection();\n  }, []);\n\n  const checkExistingConnection = async () => {\n    try {\n      // Wait for page to load completely\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Check Lace wallet for Cardano\n      if (typeof window !== 'undefined' && window.cardano?.lace) {\n        const lace = window.cardano.lace;\n        console.log(\"Lace wallet detected, checking connection...\");\n        \n        const isEnabled = await lace.isEnabled();\n        console.log(\"Lace enabled:\", isEnabled);\n        \n        if (isEnabled) {\n          const addresses = await lace.getUsedAddresses();\n          console.log(\"Lace addresses:\", addresses);\n          \n          if (addresses && addresses.length > 0) {\n            const address = addresses[0];\n            setWalletState(prev => ({\n              ...prev,\n              walletAddress: address,\n              isConnected: true,\n              chain: 'cardano'\n            }));\n            console.log(\"Lace wallet reconnected:\", address);\n          }\n        }\n      } else {\n        console.log(\"Lace wallet not found or not available yet\");\n      }\n    } catch (error) {\n      console.log(\"Error checking Lace connection:\", error);\n    }\n  };\n\n  // NFT verification query\n  const { data: nftData } = useQuery({\n    queryKey: [\"/api/wallet\", walletState.walletAddress, \"nfts\"],\n    enabled: !!walletState.walletAddress,\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  // Token balance query\n  const { data: tokenData } = useQuery({\n    queryKey: [\"/api/wallet\", walletState.walletAddress, \"lemmi\"],\n    enabled: !!walletState.walletAddress,\n    refetchInterval: 30000,\n  });\n\n  // Create/update wallet mutation\n  const walletMutation = useMutation({\n    mutationFn: async (walletData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/wallet\", walletData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallet\"] });\n    },\n  });\n\n  const connectWallet = useCallback(async () => {\n    try {\n      console.log(\"Attempting to connect to Lace wallet...\");\n      \n      // Check if window and cardano are available\n      if (typeof window === 'undefined') {\n        throw new Error(\"Window object not available\");\n      }\n      \n      // Wait for Lace to be fully loaded\n      let attempts = 0;\n      while (!window.cardano?.lace && attempts < 10) {\n        console.log(`Waiting for Lace... attempt ${attempts + 1}`);\n        await new Promise(resolve => setTimeout(resolve, 500));\n        attempts++;\n      }\n      \n      if (!window.cardano?.lace) {\n        throw new Error(\"Lace wallet tidak terinstall! Silakan install Lace wallet extension untuk Cardano di browser Anda.\");\n      }\n\n      const lace = window.cardano.lace;\n      console.log(\"Lace wallet found, requesting access...\");\n      \n      // Request access to wallet\n      const api = await lace.enable();\n      console.log(\"Lace API enabled:\", api);\n      \n      if (!api) {\n        throw new Error('Akses ke Lace wallet ditolak. Silakan coba lagi dan izinkan akses.');\n      }\n      \n      // Get addresses\n      const addresses = await api.getUsedAddresses();\n      console.log(\"Got addresses:\", addresses);\n      \n      let finalAddresses = addresses;\n      if (!finalAddresses || finalAddresses.length === 0) {\n        // Try to get unused addresses if no used addresses\n        const unusedAddresses = await api.getUnusedAddresses();\n        if (!unusedAddresses || unusedAddresses.length === 0) {\n          throw new Error('Tidak ditemukan address di wallet Lace. Pastikan wallet Anda sudah memiliki address Cardano.');\n        }\n        finalAddresses = unusedAddresses;\n      }\n\n      const address = finalAddresses[0];\n      console.log(\"Using address:\", address);\n      \n      setWalletState(prev => ({\n        ...prev,\n        walletAddress: address,\n        isConnected: true,\n        chain: 'cardano'\n      }));\n\n      // Create/update wallet in backend\n      await walletMutation.mutateAsync({\n        address,\n        chain: 'cardano',\n        hasGerbilNft: true, // Set to true for demo\n        lemmiBalance: 1000 // Demo balance\n      });\n\n      toast({\n        title: \"üéÆ Lace Wallet Terhubung!\",\n        description: `Berhasil terhubung ke Cardano: ${address.slice(0, 12)}...${address.slice(-8)}`,\n      });\n\n    } catch (error: any) {\n      console.error(\"Lace connection error:\", error);\n      toast({\n        title: \"‚ùå Koneksi Gagal\",\n        description: error.message || \"Gagal terhubung ke Lace wallet. Pastikan extension sudah terinstall dan aktif.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [walletMutation, toast]);\n\n  const disconnectWallet = useCallback(() => {\n    setWalletState({\n      walletAddress: null,\n      isConnected: false,\n      hasGerbilNft: false,\n      lemmiBalance: 0,\n      chain: null,\n    });\n    \n    toast({\n      title: \"Wallet Disconnected\",\n      description: \"Wallet has been disconnected successfully\",\n    });\n  }, [toast]);\n\n  // Update wallet state when data changes\n  useEffect(() => {\n    if (nftData) {\n      setWalletState(prev => ({\n        ...prev,\n        hasGerbilNft: (nftData as any).hasGerbilNft || false\n      }));\n    }\n  }, [nftData]);\n\n  useEffect(() => {\n    if (tokenData) {\n      setWalletState(prev => ({\n        ...prev,\n        lemmiBalance: (tokenData as any).balance || 0\n      }));\n    }\n  }, [tokenData]);\n\n  return {\n    ...walletState,\n    connectWallet,\n    disconnectWallet,\n    isLoading: walletMutation.isPending,\n  };\n}\n\n// Extend window object for TypeScript\ndeclare global {\n  interface Window {\n    ethereum?: any;\n    solana?: any;\n    cardano?: {\n      lace?: {\n        enable(): Promise<any>;\n        isEnabled(): Promise<boolean>;\n        getUsedAddresses(): Promise<string[]>;\n        getUnusedAddresses(): Promise<string[]>;\n        getBalance(): Promise<string>;\n        getNetworkId(): Promise<number>;\n      };\n    };\n  }\n}\n","size_bytes":6767},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/GameSystem.tsx":{"content":"import { useState } from 'react';\nimport { LoadingScreen } from '@/components/LoadingScreen';\nimport { CharacterSelection } from '@/components/CharacterSelection';\nimport { Game3DRunner } from '@/components/Game3DRunner';\n\ninterface Character {\n  id: string;\n  name: string;\n  image: string;\n  description: string;\n  stats: {\n    speed: number;\n    jump: number;\n    special: number;\n  };\n}\n\nexport default function GameSystem() {\n  const [gameState, setGameState] = useState<'loading' | 'character-select' | 'game' | 'main'>('loading');\n  const [selectedCharacter, setSelectedCharacter] = useState<Character | null>(null);\n\n  const handleLoadingComplete = () => {\n    setGameState('character-select');\n  };\n\n  const handleCharacterSelect = (character: Character) => {\n    setSelectedCharacter(character);\n    setGameState('game');\n  };\n\n  const handleGameEnd = (score: number) => {\n    console.log('Game ended with score:', score);\n    setGameState('character-select');\n  };\n\n  const handleBackToCharacterSelect = () => {\n    setGameState('character-select');\n    setSelectedCharacter(null);\n  };\n\n  const handleBackToMain = () => {\n    setGameState('main');\n    setSelectedCharacter(null);\n    // Navigate back to neural interface\n    window.location.href = '/';\n  };\n\n  // Render different screens based on game state\n  if (gameState === 'loading') {\n    return <LoadingScreen onLoadingComplete={handleLoadingComplete} />;\n  }\n\n  if (gameState === 'character-select') {\n    return <CharacterSelection onCharacterSelect={handleCharacterSelect} onBack={handleBackToMain} />;\n  }\n\n  if (gameState === 'game' && selectedCharacter) {\n    return <Game3DRunner character={selectedCharacter} onGameEnd={handleGameEnd} onBack={handleBackToCharacterSelect} />;\n  }\n\n  // This shouldn't happen, but redirect to character select as fallback\n  return <CharacterSelection onCharacterSelect={handleCharacterSelect} onBack={handleBackToMain} />;\n}","size_bytes":1934},"client/src/pages/neural-interface.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport WalletConnect from \"@/components/WalletConnect\";\nimport NeuralFeatureCard from \"@/components/NeuralFeatureCard\";\nimport TokenDisplay from \"@/components/TokenDisplay\";\nimport ReferralPanel from \"@/components/ReferralPanel\";\nimport SkillRewardPanel from \"@/components/SkillRewardPanel\";\nimport DegenModeToggle from \"@/components/DegenModeToggle\";\nimport KingLemmiViewer from \"@/components/KingLemmiViewer\";\nimport MiniGameTikus from \"@/components/MiniGameTikus\";\nimport GerbilNftGallery from \"@/components/GerbilNftGallery\";\nimport CardanoTransactionTracker from \"@/components/CardanoTransactionTracker\";\nimport { LoadingScreen } from \"@/components/LoadingScreen\";\nimport { CharacterSelection } from \"@/components/CharacterSelection\";\nimport { GameRunner } from \"@/components/GameRunner\";\nimport { RetroWalletScanner } from \"@/components/RetroWalletScanner\";\nimport { HDCharacterAnimation } from \"@/components/HDCharacterAnimation\";\nimport { useWallet } from \"@/hooks/useWallet\";\nimport { useAudio } from \"@/hooks/useAudio\";\nimport AshinaImage from \"@assets/ashina_1754580592322.webp\";\n\ninterface Character {\n  id: string;\n  name: string;\n  image: string;\n  description: string;\n  stats: {\n    speed: number;\n    jump: number;\n    special: number;\n  };\n}\n\nexport default function NeuralInterface() {\n  const [gameState, setGameState] = useState<'loading' | 'main' | 'character-select' | 'game'>('loading');\n  const [selectedCharacter, setSelectedCharacter] = useState<Character | null>(null);\n  const [showMiniGame, setShowMiniGame] = useState(false);\n  const [activeScreen, setActiveScreen] = useState<'main' | 'inventory' | 'skills' | 'network'>('main');\n  const [terminalText, setTerminalText] = useState(\"\");\n  const { walletAddress, isConnected, connectWallet, hasGerbilNft } = useWallet();\n  const { playClick, playHover } = useAudio();\n\n  const { data: features } = useQuery({\n    queryKey: [\"/api/features\", walletAddress],\n    enabled: !!walletAddress,\n  });\n\n  useEffect(() => {\n    const messages = [\n      \"[INITIALIZING] Neural pathways... ONLINE\",\n      \"[SCANNING] Wallet connections... DETECTED\",\n      \"[SYNCING] Blockchain data... SYNCHRONIZED\",\n      \"[READY] Neural interface active...\"\n    ];\n    \n    let index = 0;\n    const interval = setInterval(() => {\n      if (index < messages.length) {\n        setTerminalText(messages[index]);\n        index++;\n      } else {\n        clearInterval(interval);\n      }\n    }, 1500);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Check for referral code in URL\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const refCode = urlParams.get('ref');\n    if (refCode) {\n      // Track referral click\n      fetch(`/api/referral/${refCode}/click`, { method: 'POST' })\n        .catch(console.error);\n    }\n  }, []);\n\n  const activeFeaturesCount = features ? \n    ((features as any).freeAccess ? 1 : 0) + \n    ((features as any).lemmiBalance > 0 ? 1 : 0) + \n    ((features as any).skillRewards?.efficiency > 50 ? 1 : 0) +\n    ((features as any).referralCount > 0 ? 1 : 0) : 0;\n\n  const canJackIn = activeFeaturesCount >= 3;\n\n  // Handler untuk menyelesaikan loading screen\n  const handleLoadingComplete = () => {\n    setGameState('main');\n  };\n\n  // Handler untuk memulai character selection\n  const handleStartCharacterSelect = () => {\n    setGameState('character-select');\n  };\n\n  // Handler untuk memulai game\n  const handleStartGame = (character: Character) => {\n    setSelectedCharacter(character);\n    setGameState('game');\n  };\n\n  // Render berdasarkan game state\n  if (gameState === 'loading') {\n    return <LoadingScreen onLoadingComplete={handleLoadingComplete} />;\n  }\n\n  if (gameState === 'character-select') {\n    return (\n      <CharacterSelection \n        onCharacterSelect={handleStartGame}\n        onBack={() => setGameState('main')}\n      />\n    );\n  }\n\n  if (gameState === 'game' && selectedCharacter) {\n    return (\n      <GameRunner \n        character={selectedCharacter}\n        onGameEnd={() => setGameState('main')}\n      />\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen overflow-hidden relative bg-black\">\n      {/* Cyberpunk Skyscraper Background */}\n      <div className=\"fixed inset-0 z-0\">\n        {/* Night Sky */}\n        <div className=\"absolute inset-0 bg-gradient-to-b from-purple-900 via-blue-900 to-black\" />\n        \n        {/* City Silhouette Layer 1 - Far Buildings */}\n        <div className=\"absolute bottom-0 left-0 w-full h-3/4 opacity-60\">\n          <div className=\"absolute bottom-0 left-0 w-24 h-64 bg-gradient-to-t from-gray-800 to-gray-700 transform skew-x-2\" />\n          <div className=\"absolute bottom-0 left-20 w-32 h-80 bg-gradient-to-t from-gray-700 to-gray-600\" />\n          <div className=\"absolute bottom-0 left-48 w-28 h-72 bg-gradient-to-t from-gray-800 to-gray-600 transform -skew-x-1\" />\n          <div className=\"absolute bottom-0 left-72 w-36 h-96 bg-gradient-to-t from-gray-600 to-gray-500\" />\n          <div className=\"absolute bottom-0 left-96 w-24 h-56 bg-gradient-to-t from-gray-700 to-gray-600 transform skew-x-1\" />\n        </div>\n        \n        {/* City Silhouette Layer 2 - Mid Buildings */}\n        <div className=\"absolute bottom-0 right-0 w-full h-4/5 opacity-80\">\n          <div className=\"absolute bottom-0 right-0 w-28 h-72 bg-gradient-to-t from-gray-600 to-gray-500 transform -skew-x-2\" />\n          <div className=\"absolute bottom-0 right-24 w-40 h-88 bg-gradient-to-t from-gray-700 to-gray-500\" />\n          <div className=\"absolute bottom-0 right-56 w-32 h-76 bg-gradient-to-t from-gray-600 to-gray-400 transform skew-x-1\" />\n          <div className=\"absolute bottom-0 right-80 w-36 h-84 bg-gradient-to-t from-gray-700 to-gray-500\" />\n        </div>\n        \n        {/* Neon Building Lights */}\n        <div className=\"absolute bottom-20 left-8 w-1 h-12 bg-cyan-400 animate-pulse opacity-80\" />\n        <div className=\"absolute bottom-32 left-12 w-1 h-8 bg-pink-400 animate-pulse opacity-70\" />\n        <div className=\"absolute bottom-28 left-52 w-1 h-10 bg-green-400 animate-pulse opacity-75\" />\n        <div className=\"absolute bottom-36 left-76 w-1 h-14 bg-purple-400 animate-pulse opacity-80\" />\n        <div className=\"absolute bottom-40 left-100 w-1 h-6 bg-orange-400 animate-pulse opacity-70\" />\n        \n        {/* Right side neon lights */}\n        <div className=\"absolute bottom-24 right-8 w-1 h-16 bg-blue-400 animate-pulse opacity-80\" />\n        <div className=\"absolute bottom-44 right-28 w-1 h-12 bg-red-400 animate-pulse opacity-75\" />\n        <div className=\"absolute bottom-30 right-60 w-1 h-18 bg-yellow-400 animate-pulse opacity-70\" />\n        <div className=\"absolute bottom-48 right-84 w-1 h-10 bg-green-400 animate-pulse opacity-80\" />\n        \n        {/* Window Lights Pattern */}\n        <div className=\"absolute bottom-32 left-24 w-0.5 h-1 bg-yellow-200 opacity-60\" />\n        <div className=\"absolute bottom-40 left-24 w-0.5 h-1 bg-yellow-200 opacity-60\" />\n        <div className=\"absolute bottom-48 left-24 w-0.5 h-1 bg-yellow-200 opacity-60\" />\n        <div className=\"absolute bottom-56 left-28 w-0.5 h-1 bg-white opacity-40\" />\n        <div className=\"absolute bottom-64 left-28 w-0.5 h-1 bg-white opacity-40\" />\n        \n        {/* More scattered window lights */}\n        <div className=\"absolute bottom-36 left-56 w-0.5 h-1 bg-cyan-200 opacity-50\" />\n        <div className=\"absolute bottom-52 left-56 w-0.5 h-1 bg-cyan-200 opacity-50\" />\n        <div className=\"absolute bottom-44 left-80 w-0.5 h-1 bg-purple-200 opacity-50\" />\n        <div className=\"absolute bottom-60 left-80 w-0.5 h-1 bg-purple-200 opacity-50\" />\n        \n        {/* Right side windows */}\n        <div className=\"absolute bottom-40 right-32 w-0.5 h-1 bg-orange-200 opacity-50\" />\n        <div className=\"absolute bottom-56 right-32 w-0.5 h-1 bg-orange-200 opacity-50\" />\n        <div className=\"absolute bottom-48 right-64 w-0.5 h-1 bg-pink-200 opacity-50\" />\n        <div className=\"absolute bottom-68 right-64 w-0.5 h-1 bg-pink-200 opacity-50\" />\n        \n        {/* Atmospheric Glow */}\n        <div className=\"absolute inset-0 bg-gradient-to-t from-purple-900/30 via-transparent to-transparent\" />\n        <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/5 via-transparent to-pink-500/5\" />\n        \n        {/* Subtle Grid Overlay */}\n        <div className=\"absolute inset-0 opacity-5\" style={{\n          backgroundImage: `linear-gradient(rgba(0,255,255,0.3) 1px, transparent 1px),\n                           linear-gradient(90deg, rgba(0,255,255,0.3) 1px, transparent 1px)`,\n          backgroundSize: '60px 60px'\n        }} />\n      </div>\n\n      {/* Unity-style Game Layout */}\n      <div className=\"relative z-10 min-h-screen flex flex-col\">\n        \n        {/* Retro CRT-style HUD with Scanlines */}\n        <div className=\"h-24 bg-gradient-to-r from-black via-gray-900 to-black border-b border-cyan-400 relative overflow-hidden\">\n          {/* CRT Scanlines Effect */}\n          <div className=\"absolute inset-0\" style={{\n            backgroundImage: 'repeating-linear-gradient(0deg, transparent, transparent 2px, rgba(0, 255, 255, 0.03) 2px, rgba(0, 255, 255, 0.03) 4px)',\n            animation: 'scanlines 2s linear infinite'\n          }} />\n          \n          {/* Retro corner brackets */}\n          <div className=\"absolute top-1 left-1 w-8 h-8\">\n            <div className=\"absolute top-0 left-0 w-4 h-1 bg-cyan-400\"></div>\n            <div className=\"absolute top-0 left-0 w-1 h-4 bg-cyan-400\"></div>\n          </div>\n          <div className=\"absolute top-1 right-1 w-8 h-8\">\n            <div className=\"absolute top-0 right-0 w-4 h-1 bg-cyan-400\"></div>\n            <div className=\"absolute top-0 right-0 w-1 h-4 bg-cyan-400\"></div>\n          </div>\n          <div className=\"absolute bottom-1 left-1 w-8 h-8\">\n            <div className=\"absolute bottom-0 left-0 w-4 h-1 bg-cyan-400\"></div>\n            <div className=\"absolute bottom-0 left-0 w-1 h-4 bg-cyan-400\"></div>\n          </div>\n          <div className=\"absolute bottom-1 right-1 w-8 h-8\">\n            <div className=\"absolute bottom-0 right-0 w-4 h-1 bg-cyan-400\"></div>\n            <div className=\"absolute bottom-0 right-0 w-1 h-4 bg-cyan-400\"></div>\n          </div>\n          \n          {/* Glitch bars */}\n          <div className=\"absolute top-6 left-0 w-full h-px bg-red-500 opacity-30 animate-pulse\"></div>\n          <div className=\"absolute bottom-6 left-0 w-full h-px bg-green-500 opacity-20 animate-pulse\" style={{ animationDelay: '1s' }}></div>\n          \n          <div className=\"flex items-center justify-between h-full px-8\">\n            \n            {/* Retro Terminal Logo */}\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                {/* HD Character Animation in HUD */}\n                <div className=\"w-16 h-16 border border-cyan-400 bg-black relative overflow-hidden\">\n                  <HDCharacterAnimation variant=\"menu\" />\n                  {/* Pixel corners */}\n                  <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-cyan-400 z-10\"></div>\n                  <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-cyan-400 z-10\"></div>\n                  <div className=\"absolute -bottom-1 -left-1 w-2 h-2 bg-cyan-400 z-10\"></div>\n                  <div className=\"absolute -bottom-1 -right-1 w-2 h-2 bg-cyan-400 z-10\"></div>\n                  {/* Glitch overlay */}\n                  <div className=\"absolute inset-0 bg-red-500 opacity-5 animate-pulse pointer-events-none z-5\" style={{ animationDuration: '3s' }}></div>\n                </div>\n              </div>\n              <div>\n                <div className=\"font-mono text-xs text-cyan-400/60 tracking-wider mb-1\">\n                  &gt; SYSTEM_BOOT.EXE\n                </div>\n                <h1 className=\"text-xl font-orbitron font-black text-cyan-400 tracking-widest relative\">\n                  LEMMI.RUN\n                  <span className=\"absolute -right-2 top-0 w-1 h-full bg-cyan-400 animate-pulse\"></span>\n                </h1>\n                <p className=\"text-xs font-mono text-green-400/70 tracking-wider\">\n                  v2.1.2006 | CARDANO_NET\n                </p>\n              </div>\n            </div>\n            \n            {/* Retro Terminal Stats */}\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-black border border-green-400 px-3 py-1 min-w-[140px] relative font-mono\">\n                <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-green-400\"></div>\n                <div className=\"text-xs text-green-400/60\">NEURAL_LINK:</div>\n                <div className=\"text-sm text-green-300 font-bold tracking-wider\">{terminalText}</div>\n              </div>\n              \n              <div className=\"bg-black border border-cyan-400 px-3 py-1 relative font-mono\">\n                <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-cyan-400\"></div>\n                <div className=\"text-xs text-cyan-400/60\">ACCESS_LV:</div>\n                <div className=\"text-lg text-cyan-300 font-bold\">01</div>\n              </div>\n              \n              <div className=\"bg-black border border-yellow-400 px-3 py-1 relative font-mono\">\n                <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-yellow-400\"></div>\n                <div className=\"text-xs text-yellow-400/60\">TOKENS:</div>\n                <div className=\"text-lg text-yellow-300 font-bold\">0000</div>\n              </div>\n              \n              <div className=\"bg-black border border-purple-400 px-3 py-1 relative font-mono\">\n                <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-purple-400\"></div>\n                <div className=\"text-xs text-purple-400/60\">XP:</div>\n                <div className=\"text-lg text-purple-300 font-bold\">0000</div>\n              </div>\n            </div>\n            \n            {/* Retro Wallet Scanner */}\n            <RetroWalletScanner\n              onConnect={connectWallet}\n              isConnected={isConnected}\n              address={walletAddress || undefined}\n              hasNft={hasGerbilNft}\n            />\n          </div>\n        </div>\n\n        {/* Main Game Area */}\n        <div className=\"flex-1 flex flex-col md:flex-row\">\n          \n          {/* Unity-style Game Menu */}\n          <div className=\"w-full md:w-80 bg-black border-r-2 border-orange-400 relative\">\n            {/* Corner decorations */}\n            <div className=\"absolute top-0 left-0 w-4 h-4 border-t-2 border-l-2 border-orange-400\"></div>\n            <div className=\"absolute top-0 right-0 w-4 h-4 border-t-2 border-r-2 border-orange-400\"></div>\n            \n            <div className=\"p-6\">\n              <div className=\"mb-8\">\n                <div className=\"bg-black border border-orange-400 px-4 py-3 relative\">\n                  <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-orange-400\"></div>\n                  <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-orange-400\"></div>\n                  <h3 className=\"font-orbitron font-bold text-orange-400 text-center tracking-widest\">GAME SYSTEMS</h3>\n                </div>\n                <div className=\"mt-2 text-center text-xs font-mono text-orange-300/60\">NEURAL INTERFACE v2.1</div>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <button \n                  onClick={() => setActiveScreen('main')}\n                  className={`w-full bg-black border font-mono transition-all duration-200 relative ${\n                    activeScreen === 'main' \n                      ? 'border-cyan-400 text-cyan-300 bg-cyan-900/20' \n                      : 'border-gray-600 text-gray-400 hover:border-cyan-400 hover:text-cyan-400'\n                  }`}\n                  onMouseEnter={playHover}\n                >\n                  <div className=\"px-4 py-3 flex items-center space-x-3\">\n                    {activeScreen === 'main' && (\n                      <>\n                        <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-cyan-400\"></div>\n                        <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-cyan-400\"></div>\n                        <div className=\"absolute inset-0 bg-cyan-400/5 animate-pulse\"></div>\n                      </>\n                    )}\n                    <div className=\"text-sm text-cyan-400\">&gt;</div>\n                    <div className=\"text-left\">\n                      <div className=\"text-sm font-bold tracking-wider\">MAIN_HUB.EXE</div>\n                      <div className=\"text-xs opacity-60\">system_control</div>\n                    </div>\n                  </div>\n                </button>\n                \n                <button \n                  onClick={() => setActiveScreen('inventory')}\n                  className={`w-full bg-black border font-mono transition-all duration-200 relative ${\n                    activeScreen === 'inventory' \n                      ? 'border-purple-400 text-purple-300 bg-purple-900/20' \n                      : 'border-gray-600 text-gray-400 hover:border-purple-400 hover:text-purple-400'\n                  }`}\n                  onMouseEnter={playHover}\n                >\n                  <div className=\"px-4 py-3 flex items-center space-x-3\">\n                    {activeScreen === 'inventory' && (\n                      <>\n                        <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-purple-400\"></div>\n                        <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-purple-400\"></div>\n                        <div className=\"absolute inset-0 bg-purple-400/5 animate-pulse\"></div>\n                      </>\n                    )}\n                    <div className=\"text-sm text-purple-400\">&gt;</div>\n                    <div className=\"text-left\">\n                      <div className=\"text-sm font-bold tracking-wider\">INVENTORY.BAT</div>\n                      <div className=\"text-xs opacity-60\">nft_collection</div>\n                    </div>\n                  </div>\n                </button>\n                \n                <button \n                  onClick={() => window.location.href = '/game'}\n                  className=\"w-full bg-black border font-mono transition-all duration-200 relative border-green-400 text-green-400 hover:bg-green-900/20 group\"\n                  onMouseEnter={playHover}\n                >\n                  <div className=\"px-4 py-3 flex items-center space-x-3\">\n                    <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-green-400\"></div>\n                    <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-green-400\"></div>\n                    <div className=\"absolute inset-0 bg-green-400/10 animate-pulse\"></div>\n                    <div className=\"text-sm text-green-400 group-hover:animate-bounce\">&gt;&gt;</div>\n                    <div className=\"text-left\">\n                      <div className=\"text-sm font-bold tracking-wider\">RUN_ARENA.EXE</div>\n                      <div className=\"text-xs opacity-60\">lemmi_runner_v21</div>\n                    </div>\n                    <div className=\"text-green-400 text-lg animate-pulse ml-auto\">‚ñ∂</div>\n                  </div>\n                </button>\n                \n                <button \n                  onClick={() => setActiveScreen('skills')}\n                  className={`w-full bg-black border font-mono transition-all duration-200 relative ${\n                    activeScreen === 'skills' \n                      ? 'border-yellow-400 text-yellow-300 bg-yellow-900/20' \n                      : 'border-gray-600 text-gray-400 hover:border-yellow-400 hover:text-yellow-400'\n                  }`}\n                  onMouseEnter={playHover}\n                >\n                  <div className=\"px-4 py-3 flex items-center space-x-3\">\n                    {activeScreen === 'skills' && (\n                      <>\n                        <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-yellow-400\"></div>\n                        <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-yellow-400\"></div>\n                        <div className=\"absolute inset-0 bg-yellow-400/5 animate-pulse\"></div>\n                      </>\n                    )}\n                    <div className=\"text-sm text-yellow-400\">&gt;</div>\n                    <div className=\"text-left\">\n                      <div className=\"text-sm font-bold tracking-wider\">SKILLS.SYS</div>\n                      <div className=\"text-xs opacity-60\">neural_upgrades</div>\n                    </div>\n                  </div>\n                </button>\n                \n                <button \n                  onClick={() => setActiveScreen('network')}\n                  className={`w-full bg-black border font-mono transition-all duration-200 relative ${\n                    activeScreen === 'network' \n                      ? 'border-blue-400 text-blue-300 bg-blue-900/20' \n                      : 'border-gray-600 text-gray-400 hover:border-blue-400 hover:text-blue-400'\n                  }`}\n                  onMouseEnter={playHover}\n                >\n                  <div className=\"px-4 py-3 flex items-center space-x-3\">\n                    {activeScreen === 'network' && (\n                      <>\n                        <div className=\"absolute -top-1 -left-1 w-2 h-2 bg-blue-400\"></div>\n                        <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-blue-400\"></div>\n                        <div className=\"absolute inset-0 bg-blue-400/5 animate-pulse\"></div>\n                      </>\n                    )}\n                    <div className=\"text-sm text-blue-400\">&gt;</div>\n                    <div className=\"text-left\">\n                      <div className=\"text-sm font-bold tracking-wider\">NETWORK.DLL</div>\n                      <div className=\"text-xs opacity-60\">cardano_nodes</div>\n                    </div>\n                  </div>\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Unity Game Main Area */}\n          <div className=\"flex-1 bg-gradient-to-br from-black/90 via-gray-900/80 to-black/90 backdrop-blur-md\">\n            \n            {activeScreen === 'main' && (\n              <div className=\"p-4 md:p-6 h-full overflow-y-auto\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6 h-full\">\n                  \n                  {/* Player Access Panel */}\n                  <div className=\"group bg-gradient-to-br from-green-900/20 to-black/60 rounded-xl border-2 border-green-500/30 p-4 md:p-6 min-h-[220px] hover:border-green-400/50 transition-all duration-300 hover:shadow-lg hover:shadow-green-500/20\">\n                    <div className=\"flex items-center space-x-3 mb-4\">\n                      <div className=\"w-3 h-3 bg-green-400 rounded-full animate-pulse\" />\n                      <h3 className=\"font-orbitron font-bold text-green-400\">PLAYER ACCESS</h3>\n                    </div>\n                    <NeuralFeatureCard \n                      title=\"ACCESS CONTROL\"\n                      subtitle=\"Gerbil NFT Verification\"\n                      icon=\"üêπ\"\n                      status={hasGerbilNft}\n                      walletAddress={walletAddress}\n                      gradientFrom=\"cyber-green\"\n                      gradientTo=\"cyber-cyan\"\n                      delay={0}\n                    />\n                  </div>\n                  \n                  {/* Currency Panel */}\n                  <div className=\"group bg-gradient-to-br from-purple-900/20 to-black/60 rounded-xl border-2 border-purple-500/30 p-4 md:p-6 min-h-[220px] hover:border-purple-400/50 transition-all duration-300 hover:shadow-lg hover:shadow-purple-500/20\">\n                    <div className=\"flex items-center space-x-3 mb-4\">\n                      <div className=\"w-3 h-3 bg-purple-400 rounded-full animate-pulse\" />\n                      <h3 className=\"font-orbitron font-bold text-purple-400\">CURRENCY</h3>\n                    </div>\n                    <TokenDisplay walletAddress={walletAddress} />\n                  </div>\n                  \n                  {/* Special Mode Panel */}\n                  <div className=\"group bg-gradient-to-br from-red-900/20 to-black/60 rounded-xl border-2 border-red-500/30 p-4 md:p-6 min-h-[220px] hover:border-red-400/50 transition-all duration-300 hover:shadow-lg hover:shadow-red-500/20\">\n                    <div className=\"flex items-center space-x-3 mb-4\">\n                      <div className=\"w-3 h-3 bg-red-400 rounded-full animate-pulse\" />\n                      <h3 className=\"font-orbitron font-bold text-red-400\">CHAOS MODE</h3>\n                    </div>\n                    <DegenModeToggle onActivateMiniGame={() => setShowMiniGame(true)} />\n                  </div>\n                  \n                  {/* Character Collection Panel */}\n                  <div className=\"group bg-gradient-to-br from-orange-900/20 to-black/60 rounded-xl border-2 border-orange-500/30 p-4 md:p-6 min-h-[220px] hover:border-orange-400/50 transition-all duration-300 hover:shadow-lg hover:shadow-orange-500/20\">\n                    <div className=\"flex items-center space-x-3 mb-4\">\n                      <div className=\"w-3 h-3 bg-orange-400 rounded-full animate-pulse\" />\n                      <h3 className=\"font-orbitron font-bold text-orange-400\">COLLECTION</h3>\n                    </div>\n                    <KingLemmiViewer walletAddress={walletAddress} />\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {activeScreen === 'inventory' && (\n              <div className=\"p-6 h-full overflow-y-auto\">\n                <h2 className=\"text-2xl font-orbitron text-purple-400 mb-6\">üéÆ DIGITAL INVENTORY</h2>\n                <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n                  {/* NFT Collection */}\n                  <div className=\"bg-black/60 rounded-lg border-2 border-purple-500/50 p-4\">\n                    <h3 className=\"text-xl font-orbitron text-orange-400 mb-4\">üêπ GERBIL NFT COLLECTION</h3>\n                    <GerbilNftGallery walletAddress={walletAddress} />\n                  </div>\n                  \n                  {/* Token Display */}\n                  <div className=\"bg-black/60 rounded-lg border-2 border-green-500/50 p-4\">\n                    <h3 className=\"text-xl font-orbitron text-green-400 mb-4\">üí∞ TOKEN ASSETS</h3>\n                    <TokenDisplay walletAddress={walletAddress} />\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {activeScreen === 'skills' && (\n              <div className=\"p-6 h-full\">\n                <h2 className=\"text-2xl font-orbitron text-cyber-green mb-6\">NEURAL SKILLS</h2>\n                <SkillRewardPanel walletAddress={walletAddress} />\n              </div>\n            )}\n\n            {activeScreen === 'network' && (\n              <div className=\"p-6 h-full overflow-y-auto\">\n                <h2 className=\"text-2xl font-orbitron text-blue-400 mb-6\">üåê BLOCKCHAIN NETWORK</h2>\n                <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n                  {/* Transaction Tracker */}\n                  <div className=\"bg-black/60 rounded-lg border-2 border-blue-500/50 p-4\">\n                    <h3 className=\"text-xl font-orbitron text-cyan-400 mb-4\">üîó CARDANO TRANSACTIONS</h3>\n                    <CardanoTransactionTracker walletAddress={walletAddress} />\n                  </div>\n                  \n                  {/* Referral Network */}\n                  <div className=\"bg-black/60 rounded-lg border-2 border-yellow-500/50 p-4\">\n                    <h3 className=\"text-xl font-orbitron text-yellow-400 mb-4\">üë• REFERRAL NETWORK</h3>\n                    <ReferralPanel walletAddress={walletAddress} />\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Right Panel - Quick Stats (Hidden on mobile) */}\n          <div className=\"hidden lg:block w-80 border-l-2 border-cyber-cyan/30 bg-black/90 backdrop-blur-sm\">\n            <div className=\"p-4\">\n              <h3 className=\"font-orbitron text-cyber-cyan mb-4\">NEURAL STATUS</h3>\n              \n              {/* Quick Stats */}\n              <div className=\"space-y-4\">\n                <div className=\"bg-black/70 rounded border border-cyber-green/30 p-3\">\n                  <div className=\"text-xs font-mono text-cyber-green mb-1\">CONNECTION STATUS</div>\n                  <div className=\"text-sm font-bold\">{isConnected ? 'ONLINE' : 'OFFLINE'}</div>\n                </div>\n                \n                <div className=\"bg-black/70 rounded border border-cyber-cyan/30 p-3\">\n                  <div className=\"text-xs font-mono text-cyber-cyan mb-1\">ACTIVE PATHWAYS</div>\n                  <div className=\"text-sm font-bold\">{activeFeaturesCount}/7</div>\n                </div>\n                \n                <div className=\"bg-black/70 rounded border border-cyber-magenta/30 p-3\">\n                  <div className=\"text-xs font-mono text-cyber-magenta mb-1\">NFT STATUS</div>\n                  <div className=\"text-sm font-bold\">{hasGerbilNft ? 'VERIFIED' : 'UNVERIFIED'}</div>\n                </div>\n              </div>\n\n              {/* Jack In Button */}\n              <div className=\"mt-8\">\n                <button \n                  className={`w-full px-4 py-6 bg-gradient-to-r from-cyber-cyan via-cyber-magenta to-cyber-green rounded-lg font-orbitron font-bold text-sm transition-all duration-300 ${\n                    canJackIn ? 'hover:animate-glow cursor-pointer' : 'opacity-50 cursor-not-allowed'\n                  }`}\n                  disabled={!canJackIn}\n                  onClick={() => {\n                    if (canJackIn) {\n                      playClick();\n                    }\n                  }}\n                  onMouseEnter={playHover}\n                >\n                  JACK IN\n                  <br />\n                  <span className=\"text-xs opacity-70\">NEURAL NETWORK</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Mini Game Modal */}\n      {showMiniGame && (\n        <MiniGameTikus onClose={() => setShowMiniGame(false)} walletAddress={walletAddress} />\n      )}\n\n      {/* Mobile Game Button */}\n      <div className=\"lg:hidden fixed bottom-20 left-1/2 transform -translate-x-1/2 z-20\">\n        <button \n          className={`px-8 py-3 bg-gradient-to-r from-orange-500 via-red-500 to-purple-600 rounded-full font-orbitron font-bold text-sm transition-all duration-300 shadow-lg ${\n            canJackIn ? 'hover:scale-105 cursor-pointer animate-pulse' : 'opacity-50 cursor-not-allowed'\n          }`}\n          disabled={!canJackIn}\n          onClick={() => {\n            if (canJackIn) {\n              playClick();\n            }\n          }}\n          onMouseEnter={playHover}\n        >\n          üèÉ START GAME ({activeFeaturesCount}/4)\n        </button>\n      </div>\n\n      {/* Game Character Helper */}\n      <div className=\"fixed bottom-6 right-6 z-20\">\n        <div className=\"relative group cursor-pointer\">\n          <div className=\"w-12 h-12 rounded-full bg-gradient-to-br from-orange-500 to-red-600 p-1 animate-bounce\">\n            <div className=\"w-full h-full rounded-full bg-black flex items-center justify-center border border-orange-400/50 group-hover:scale-110 transition-transform\">\n              <span className=\"text-xl\">üêπ</span>\n            </div>\n          </div>\n          <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full animate-ping\" />\n          \n          {/* Tooltip */}\n          <div className=\"absolute bottom-full right-0 mb-2 hidden group-hover:block\">\n            <div className=\"bg-black/90 text-orange-300 text-xs font-mono px-2 py-1 rounded border border-orange-500/50 whitespace-nowrap\">\n              Gerbil Guide üêπ\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":32162},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}